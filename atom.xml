<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kyralo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kyralo.online/"/>
  <updated>2020-03-18T05:33:02.655Z</updated>
  <id>https://www.kyralo.online/</id>
  
  <author>
    <name>kyralo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Netty学习- Reactor模式</title>
    <link href="https://www.kyralo.online/2020/02/20/Netty%E5%AD%A6%E4%B9%A0-Reactor%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.kyralo.online/2020/02/20/Netty学习-Reactor模式/</id>
    <published>2020-02-20T14:59:55.000Z</published>
    <updated>2020-03-18T05:33:02.655Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-传统阻塞I-O服务模型"><a href="#一-传统阻塞I-O服务模型" class="headerlink" title="一. 传统阻塞I/O服务模型"></a>一. 传统阻塞I/O服务模型</h3><h4 id="工作原理图"><a href="#工作原理图" class="headerlink" title="工作原理图"></a>工作原理图</h4><p>    先了解传统I/O的原理以及从传统I/O到Reactor模式的转变才能更深刻地理解Reactor模式.</p><p><img src="https://view.2heng.xin/images/2020/02/20/IO.png" alt></p><h4 id="模型特点"><a href="#模型特点" class="headerlink" title="模型特点"></a>模型特点</h4><ul><li>采用阻塞IO模式获取输入的数据</li><li>每个连接都需要独立的线程完成数据的输入, 业务处理, 数据返回</li></ul><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><ul><li>当并发数特别大时, 服务端会创建大量线程, 占用大量系统资源</li><li>连接建立后, 若当前线程暂时没有数据可读, 该线程会阻塞在read操作, 造成线程资源浪费</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>针对传统阻塞io服务模型的2个缺点有以下两种解决方案: </p><ol><li><p>基于I/O复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理Reactor对应的叫法:1.反应器模式2.分发者模式(Dispatcher) 3.通知者模式(notifier)</p></li><li><p>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务</p></li></ol><p><span style="color: red">I/O复用结合线程池，就是Reactor模式基本设计思想<br></span></p><h3 id="二-Reactor模式"><a href="#二-Reactor模式" class="headerlink" title="二. Reactor模式"></a>二. Reactor模式</h3><h4 id="Reactor模式基本说明"><a href="#Reactor模式基本说明" class="headerlink" title="Reactor模式基本说明"></a>Reactor模式基本说明</h4><ul><li>Reactor模式，通过一个或多个输入同时传递给服务处理器的模式(基于事件驱动)</li><li>服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程， 因此Reactor模式也叫Dispatcher模式</li><li>Reactor模式使用IO复用监听事件,收到事件后，分发给某个线程(进程),这点就是网络服务器高并发处理关键</li></ul><h4 id="Reactor模式核心组成"><a href="#Reactor模式核心组成" class="headerlink" title="Reactor模式核心组成"></a>Reactor模式核心组成</h4><ol><li>Reactor：Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；</li><li>Handlers：处理程序执行I/O事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作。</li></ol><h4 id="Reactor模式分类"><a href="#Reactor模式分类" class="headerlink" title="Reactor模式分类"></a>Reactor模式分类</h4><p>根据Reactor的数量和处理资源池线程的数量不同，有3种典型的实现</p><ol><li>单Reactor单线程</li><li>单Reactor多线程</li><li>主从Reactor多线程</li></ol><h4 id="单Reactor单线程"><a href="#单Reactor单线程" class="headerlink" title="单Reactor单线程"></a>单Reactor单线程</h4><p>原理图</p><p><img src="https://view.2heng.xin/images/2020/02/21/Reactor.png" alt></p><p>说明</p><ol><li>Select是前面IO复用模型介绍的标准网络编程API，可以实现应用程序通过一个阻塞对象监听多路连接请求</li><li>Reactor对象通过Select监控客户端请求事件，收到事件后通过Dispatch进行分发</li><li>如果是建立连接请求事件，则由Acceptor通过Accept处理连接请求，然后创建一个Handler对象处理连接完成后的后续业务处理</li><li>如果不是建立连接事件，则Reactor会分发调用连接对应的Handler来响应</li><li>Handler会完成Read→业务处理→Send的完整业务流程</li></ol><br><p>优缺点分析</p><ol><li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li><li>缺点：性能问题，只有一个线程，无法完全发挥多核CPU的性能。Handler在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li><li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li><li>使用场景：客户端的数量有限，业务处理非常快速,比如Redis在业务处理的时间复杂度O(1)的情况</li></ol><h4 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h4><p>原理图</p><p><img src="https://view.2heng.xin/images/2020/02/21/Reactor.jpg" alt></p><ol><li>Reactor对象通过select监控客户端请求事件,收到事件后，通过dispatch进行分发</li><li>如果建立连接请求,则右Acceptor通过accept处理连接请求,然后创建一个Handler对象处理完成连接后的各种事件</li><li>如果不是连接请求，则由reactor分发调用连接对应的handler来处理</li><li>handler只负责响应事件，不做具体的业务处理,通过read读取数据后，会分发给后面的worker线程池的某个线程处理业务</li><li>worker线程池会分配独立线程完成真正的业务，并将结果返回给handler</li><li>handler收到响应后，通过send将结果返回给client</li></ol><br><p>优缺点分析</p><ol><li>优点：可以充分的利用多核cpu的处理能力</li><li>缺点：多线程数据共享和访问比较复杂,reactor处理所有的事件的监听和响应,<br>在单线程运行,在高并发场景容易出现性能瓶颈.</li></ol><h4 id="主从Reactor多线程"><a href="#主从Reactor多线程" class="headerlink" title="主从Reactor多线程"></a>主从Reactor多线程</h4><p>工作原理图</p><p>    针对单Reactor多线程模型中，Reactor在单线程中运行，高并发场景下容易成为性能瓶颈，可以让Reactor在多线程中运行</p><p><img src="https://view.2heng.xin/images/2020/02/21/Reactor9984a1a752ffbe0f.png" alt></p><ol><li>Reactor主线程MainReactor对象通过select监听连接事件,收到事件后，通过Acceptor处理连接事件</li><li>当Acceptor   处理连接事件后，MainReactor将连接分配给SubReactor</li><li>subreactor将连接加入到连接队列进行监听,并创建handler进行各种事件处理</li><li>当有新事件发生时，subreactor就会调用对应的handler处理</li><li>handler通过read读取数据，分发给后面的worker线程处理</li><li>worker线程池分配独立的worker线程进行业务处理，并返回结果</li><li>handler收到响应的结果后，再通过send将结果返回给client</li><li>Reactor主线程可以对应多个Reactor子线程,即MainRecator可以关联多个SubReactor</li></ol><br><p>方案优缺点分析</p><ol><li>优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。</li><li>优点：父线程与子线程的数据交互简单，Reactor主线程只需要把新连接传给子线程，子线程无需返回数据。</li><li>缺点：编程复杂度较高</li><li>结合实例：这种模型在许多项目中广泛使用，包括Nginx主从Reactor多进程模型，Memcached主从多线程，Netty主从多线程模型的支持</li></ol><h4 id="Reactor模式小结"><a href="#Reactor模式小结" class="headerlink" title="Reactor模式小结"></a>Reactor模式小结</h4><ol><li>单Reactor单线程，前台接待员和服务员是同一个人，全程为顾客服</li><li>单Reactor多线程，1个前台接待员，多个服务员，接待员只负责接待</li><li>主从Reactor多线程，多个前台接待员，多个服务生</li></ol><br><p>Reactor模式具有如下的优点</p><ol><li>响应快，不必为单个同步时间所阻塞，虽然Reactor本身依然是同步的</li><li>可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li><li>扩展性好，可以方便的通过增加Reactor实例个数来充分利用CPU资源</li><li>复用性好，Reactor模型本身与具体事件处理逻辑无关，具有很高的复用性</li></ol>]]></content>
    
    <summary type="html">
    
      Reactor模式的基本内容
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Netty" scheme="https://www.kyralo.online/tagsP/Netty/"/>
    
      <category term="线程模型" scheme="https://www.kyralo.online/tagsP/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="Reactor" scheme="https://www.kyralo.online/tagsP/Reactor/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习-netty深入了解</title>
    <link href="https://www.kyralo.online/2020/02/20/Netty%E5%AD%A6%E4%B9%A0-netty%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3/"/>
    <id>https://www.kyralo.online/2020/02/20/Netty学习-netty深入了解/</id>
    <published>2020-02-20T00:44:18.000Z</published>
    <updated>2020-03-18T05:33:00.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Netty与NIO"><a href="#Netty与NIO" class="headerlink" title="Netty与NIO"></a>Netty与NIO</h3><h4 id="原生NIO存在的问题"><a href="#原生NIO存在的问题" class="headerlink" title="原生NIO存在的问题"></a>原生NIO存在的问题</h4><ol>    <li>        NIO的类库和API复杂, 使用麻烦: 要熟练掌握 Selector, ServerSocketChannel, SocketChannel, ByteBuffer    </li>    <li>        需要开发者对Java多线程(NIO涉及到Reactor模式) 和 网络编程非常熟悉, 才能编写出高质量的NIO程序     </li>    <li>        开发工作量和难度非常大: 例如客户端面临重新连接, 网络闪断, 半包读写, 失败缓存, 网络拥塞和异常流的处理 等.    </li>    <li>        JDK NIO 的 bug: 臭名昭著的Epoll Bug, 它会导致Selector空轮询, 最终CUP飙满, JDK1.8也没有完全修复      </li></ol><h4 id="Netty的优点"><a href="#Netty的优点" class="headerlink" title="Netty的优点"></a>Netty的优点</h4><p>Netty 对 jdk 自带的NIO的API进行了封装, 解决了上诉问题.</p><p>    <ol>        <li>            设计优雅: 适用于各种传输类型的统一API阻塞和非阻塞Socket; 基于灵活且可扩展的事件模型, 可以清晰地分离关注点; 高度可定制地线程模型 - 单线程, 一个或多个线程池.        </li>        <li>            使用方便: 详细记录的Javadoc, 用户指南和示例: 没有其他依赖项, 使用JDK5(Netty 3.x) 或者 6 (Netty 4.x) 基本ok        </li>        <li>            高性能, 吞吐量更高: 延迟更低, 减少资源消耗; 最小化不必要的内存复制.        </li>        <li>            安全:  完整的SSL/TLS 和 StartLTS支持        </li>        <li>            社区活跃: 版本迭代周期短, 更新频繁, bug可以被及时修复.        </li>    </ol></p><h3 id="Netty高性能架构设计"><a href="#Netty高性能架构设计" class="headerlink" title="Netty高性能架构设计"></a>Netty高性能架构设计</h3><h4 id="Netty的线程模型"><a href="#Netty的线程模型" class="headerlink" title="Netty的线程模型"></a>Netty的线程模型</h4><p>    目前存在的线程模型有: 传统阻塞的I/O服务模型, 基于Reactor模式的模型. <br>    根据Reactor的数量和处理资源线程池的数量不同, 有3种典型的实现: 1. 单Reactor 单线程;2. 单Reactor 多线程; 3. 主从Reactor 多线程.</p><p>    <span style="color: red">Netty的线程模型是基于主从Reactor多线程模型做改进.    </span></p><p><img src="https://view.2heng.xin/images/2020/02/21/netty.png" alt></p><p>说明</p><ol><li>Netty 抽象出两组线程池 BossGroup 专门负责接收客户端的连接, WorkerGroup 专门负责网络的读写</li><li>BossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup</li><li>NioEventLoopGroup 相当于一个事件循环组, 这个组中含有多个事件循环 ，每一个事件循环是 NioEventLoop</li><li>NioEventLoop 表示一个不断循环的执行处理任务的线程， 每个 NioEventLoop  都有一个 selector ,  用于监听绑定在其上的 socket 的网络通讯</li><li>NioEventLoopGroup 可以有多个线程,  即可以含有多个 NioEventLoop</li><li>每个 Boss NioEventLoop 循环执行的步骤有 3 步</li></ol><ul><li>轮询 accept  事件</li><li>处理 accept 事件 , 与 client 建立连接 , 生成 NioScocketChannel , 并将其注册到某个 worker NIOEventLoop 上的 selector</li><li>处理任务队列的任务 ， 即 runAllTasks</li></ul><ol start="7"><li>每个 Worker NIOEventLoop 循环执行的步骤</li></ol><ul><li>轮询 read, write 事件</li><li>处理 i/o 事件， 即 read , write 事件，在对应 NioScocketChannel 处理</li><li>处理任务队列的任务 ， 即 runAllTasks</li></ul><ol start="8"><li>每个Worker NIOEventLoop   处理业务时，会使用pipeline(管道), pipeline  中包含了 channel , 即通过pipeline 可以获取到对应通道, 管道中维护了很多的 处理器</li></ol><h4 id="Netty-快速入门实例-TCP-服务"><a href="#Netty-快速入门实例-TCP-服务" class="headerlink" title="Netty 快速入门实例-TCP 服务"></a>Netty 快速入门实例-TCP 服务</h4><p>NettyServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           创建 BossGroup 和 WorkerGroup</span></span><br><span class="line"><span class="comment">           说明</span></span><br><span class="line"><span class="comment">           1. 创建两个线程组 bossGroup 和 workerGroup</span></span><br><span class="line"><span class="comment">           2. bossGroup 只是处理连接请求 ,  真正的和客户端业务处理，</span></span><br><span class="line"><span class="comment">           会交给 workerGroup 完成</span></span><br><span class="line"><span class="comment">           3. 两个都是无限循环</span></span><br><span class="line"><span class="comment">           4. bossGroup 和 workerGroup  含有的子线程(NioEventLoop)的个数</span></span><br><span class="line"><span class="comment">            默认实际 cpu 核数 * 2</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建服务器端的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用链式编程来进行设置</span></span><br><span class="line">            <span class="comment">//设置两个线程组</span></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    <span class="comment">//使用 NioSocketChannel 作为服务器的通道实现</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    <span class="comment">//设置保持活动连接状态</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                    <span class="comment">//创建一个通道测试对象(匿名对象)</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//给 pipeline 设置处理器</span></span><br><span class="line">                        <span class="comment">// 给我们的 workerGroup 的 EventLoop  对应的管道设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">".....服务器 is ready..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span></span><br><span class="line">            <span class="comment">//启动服务器(并绑定端口)</span></span><br><span class="line">            ChannelFuture cf = bootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            cf.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//优雅关闭</span></span><br><span class="line"></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyServerHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1.我们自定义一个 Handler 需要继续 netty  规定好的某个 HandlerAdapter(规范)</span></span><br><span class="line"><span class="comment">//2.这时我们自定义一个 Handler ,  才能称为一个 handler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span>  <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   1.ChannelHandlerContext ctx:上下文对象,  含有 管道 pipeline , 通道 channel,  地址</span></span><br><span class="line"><span class="comment">     *   2.Object msg: 就是客户端发送的数据 默认 Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器读取线程 "</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"server ctx ="</span> + ctx);</span><br><span class="line">        System.out.println(<span class="string">"看看 channel 和 pipeline 的关系"</span>);</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本质是一个双向链接,  出站入站</span></span><br><span class="line">        <span class="comment">//ChannelPipeline pipeline = ctx.pipeline()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 msg  转成一个 ByteBuf</span></span><br><span class="line">        <span class="comment">//ByteBuf 是 Netty  提供的，不是 NIO 的 ByteBuffer</span></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">"客户端发送消息是:"</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">"客户端地址:"</span> + channel.remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据读取完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//writeAndFlush 是 write + flush</span></span><br><span class="line">        <span class="comment">//将数据写入到缓存，并刷新</span></span><br><span class="line">        <span class="comment">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">"hello, 客户端--&gt;"</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理异常, 一般是需要关闭通道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            <span class="comment">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(group)</span><br><span class="line">            <span class="comment">//设置线程组</span></span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">                    <span class="comment">// 设置客户端通道的实现类(反射)</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                            <span class="comment">//加入自己的处理器</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"客户端 ok.."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动客户端去连接服务器端</span></span><br><span class="line">            <span class="comment">//关于 ChannelFuture 要分析，涉及到 netty 的异步模型</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">"127.0.0.1"</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            <span class="comment">//给关闭通道进行监听</span></span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NettyClientHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道就绪就会触发该方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"client "</span> + ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">"hello, server: --&gt;"</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道有读取事件时，会触发</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">"服务器回复的消息:"</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">"服务器的地址： "</span>+ ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Netty-异步模型"><a href="#Netty-异步模型" class="headerlink" title="Netty 异步模型"></a>Netty 异步模型</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><ol><li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</li><li>Netty 中的 I/O 操作是异步的，包括 Bind、Write、Connect  等操作会简单的返回一个 ChannelFuture。</li><li>调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得<br>IO 操作结果</li><li>Netty 的异步模型是建立在 future 和 callback 的之上的。callback  就是回调。重点说 Future，它的核心思想是：假设一个方法 fun，计算过程可能非常耗时，等待 fun 返回显然不合适。那么可以在调用 fun 的时候，立马返回一个 Future，后续可以通过 Future 去监控方法 fun  的处理过程(即 ： Future-Listener 机制)</li></ol><h5 id="Future-说明"><a href="#Future-说明" class="headerlink" title="Future 说明"></a>Future 说明</h5><ol><li>表示异步的执行结果, 可以通过它提供的方法来检测执行是否完成，比如检索计算等等.</li><li>ChannelFuture 是一个接口 ： public interface ChannelFuture extends Future<void>我们可以添加监听器，当监听的事件发生时，就会通知到监听器</void></li></ol><h5 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h5><p><img src="https://cdn.kyralo.online/img/netty-channelfuture-work-process.png" alt></p><p>    数据读取 -> 数据处理(发送方) -> 数据传输 -> 数据处理(接收方) -> 显示数据</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p><strong>Server</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            </span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup).</span><br><span class="line">                    channel(NioServerSocketChannel.class).</span><br><span class="line">                    childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">// 取得管道</span></span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">// HttpServerCodec 是netty提供的处理http的 编,解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">"TestHttpServerCodec"</span>, </span><br><span class="line">                                <span class="keyword">new</span> HttpServerCodec())</span><br><span class="line">                                    <span class="comment">//添加自定义handler</span></span><br><span class="line">                                    .addLast(<span class="string">"TestHttpServerHandler"</span>, </span><br><span class="line">                                        <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().close().sync();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Handler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否是httpRequest请求</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line"></span><br><span class="line">            Channel channel = ctx.channel();</span><br><span class="line">            ChannelPipeline pipeline = ctx.pipeline();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"pipeline ==&gt; "</span> + pipeline.hashCode());</span><br><span class="line">            System.out.println(<span class="string">"handler ==&gt; "</span> + <span class="keyword">this</span>.hashCode());</span><br><span class="line">            System.out.println(<span class="string">"msg type ==&gt; "</span> + msg.getClass());</span><br><span class="line">            System.out.println(<span class="string">"client address ==&gt; "</span> + channel.remoteAddress());</span><br><span class="line"></span><br><span class="line">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class="line"></span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"/favicon.ico"</span>.equals(uri.getPath()))&#123;</span><br><span class="line">                System.out.println(<span class="string">"浏览器请求了网站ico"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 消息响应回复</span></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">"server here"</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建http响应</span></span><br><span class="line">            FullHttpResponse response = </span><br><span class="line">                <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1,</span><br><span class="line">                    HttpResponseStatus.OK, content);</span><br><span class="line"></span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">"text/plain"</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将设置好的response返回</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      netty的基本介绍及作用领域
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Netty" scheme="https://www.kyralo.online/tagsP/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习-java NIO零拷贝</title>
    <link href="https://www.kyralo.online/2020/02/18/Netty%E5%AD%A6%E4%B9%A0-java-NIO%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>https://www.kyralo.online/2020/02/18/Netty学习-java-NIO零拷贝/</id>
    <published>2020-02-18T03:18:19.000Z</published>
    <updated>2020-03-18T05:32:55.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="零拷贝基本介绍"><a href="#零拷贝基本介绍" class="headerlink" title="零拷贝基本介绍"></a>零拷贝基本介绍</h4><ol>    <li>        CPU不执行拷贝数据从一个存储区域到另一个存储区域的任务，这通常用于通过网络传输一个文件时以减少CPU周期和内存带宽(零拷贝是从操作系统的角度来考虑, <span style="color: red">是不经过cpu拷贝, 但是DMA拷贝(直接内存映射)</span>不可避免)    </li>    <li>        在java程序中, 常用的零拷贝有 mmap(内存映射) 和 sendFile.    </li>    <li>        我们说的零拷贝是从操作系统的角度来说的.因为内核缓冲区之间没有数据是重复的(只有kernel buffer有一份数据).    </li></ol><h4 id="零拷贝的优点"><a href="#零拷贝的优点" class="headerlink" title="零拷贝的优点"></a>零拷贝的优点</h4><ul>    <li>        减少甚至完全避免不必要的CPU拷贝，从而让CPU解脱出来去执行其他的任务    </li>    <li>        减少内存带宽的占用    </li>    <li>        通常零拷贝技术还能够减少用户空间和操作系统内核空间之间的上下文切换    </li></ul><h4 id="传统io读写方式"><a href="#传统io读写方式" class="headerlink" title="传统io读写方式"></a>传统io读写方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"index.html"</span>);</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"rw"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">raf.read(arr);</span><br><span class="line">Socket socket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>).accept();</span><br><span class="line">socket.getOutputStream().write(arr);</span><br></pre></td></tr></table></figure><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><p><img src="https://view.2heng.xin/images/2020/02/18/io.png" alt></p><p style="color: blue">    <span>相关说明: </span><br>    <ul>        <li>            用户态: use context        </li>        <li>            内核态: kernel context        </li>        <li>            DMA copy: 直接内存复制(数据)         </li>        <li>            CPU copy: 通过cpu进行数据复制        </li>        <li>            User space: 用户态空间        </li>        <li>            Kernel space: 内核态空间        </li>    </ul></p><br><p style="color: red">    如图传统io的数据读写过程经历了4次拷贝(2次DMA拷贝, 2次CPU拷贝),    4次上下文切换</p><h4 id="使用mmap读写方式"><a href="#使用mmap读写方式" class="headerlink" title="使用mmap读写方式"></a>使用mmap读写方式</h4><p>    通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户控件的拷贝次数</p><h5 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h5><p><img src="https://view.2heng.xin/images/2020/02/18/mmap.png" alt></p><p style="color: red">    如图, 使用mmap读写方式经历了3次拷贝(2次DMA拷贝, 1次CPU拷贝),    4次上下文切换.对比传统io的读写, mmap方式减少了在 user buffer ->socket buffer    这个地方的CPU拷贝</p><h4 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h4><h5 id="Linux-2-1版的sendfile函数"><a href="#Linux-2-1版的sendfile函数" class="headerlink" title="Linux 2.1版的sendfile函数"></a>Linux 2.1版的sendfile函数</h5><p>   数据根本不经过用户态，直接从内核缓冲区进入到 Socket Buffer，同时，由于和用户态完全无关，就减少了一次上下文切换。 </p><p><img src="https://view.2heng.xin/images/2020/02/18/sendfile_2.1.png" alt></p><p style="color: red">    如图, Linux 2.1版的sendfile方式经历了3次拷贝(2次DMA拷贝, 1次CPU拷贝),    3次上下文切换. 对比mmap方式, 减少了一次用户态到内核态的切换</p><h5 id="Linux-2-4版的sendfile函数"><a href="#Linux-2-4版的sendfile函数" class="headerlink" title="Linux 2.4版的sendfile函数"></a>Linux 2.4版的sendfile函数</h5><p>    Linux 在 2.4 版本中，做了一些修改，避免了从内核缓冲区拷贝到 Socket buffer 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。</p><p><img src="https://view.2heng.xin/images/2020/02/18/sendfile_2.4.png" alt></p><p style="color: red">    如图, Linux 2.4版的sendfile方式只经历了2次DMA拷贝, 3次上下文切换,    组织实现了零拷贝(无CPU拷贝)</p><h4 id="mmap-和-sendfile-的区别"><a href="#mmap-和-sendfile-的区别" class="headerlink" title="mmap 和 sendfile 的区别"></a>mmap 和 sendfile 的区别</h4><ol>    <li>        mmap适合小数据量读写, sendfile适合大文件传输.    </li>    <li>        mmap需要4次上下文切换, 3次数据拷贝<br>        sendflie 需要3次上下文切换, 最少2次数据拷贝(因linux内核版本不同)    </li>    <li>        sendfile可以利用DMA方式减少CPU拷贝, 而mmap必须使用内核拷贝到Socket缓冲区的方式    </li></ol><h4 id="NIO零拷贝实例"><a href="#NIO零拷贝实例" class="headerlink" title="NIO零拷贝实例"></a>NIO零拷贝实例</h4><p>    <ol>        <li>使用NIO零拷贝方式传递一个大文件</li>    </ol></p><p>Server端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioZeroCopyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>);</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建buffer */</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != readCount) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    readCount = socketChannel.read(byteBuffer);</span><br><span class="line">                    <span class="keyword">if</span> (readCount != <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(readCount);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* 倒带 position = 0 mark作废 */</span></span><br><span class="line">                byteBuffer.rewind();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Client端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioZeroCopyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        String fileName = <span class="string">"xxx.zip"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 获取一个文件 channel */</span></span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(fileName).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 准备发送 */</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.linux下一个transferTo方法就可以完成传输,</span></span><br><span class="line"><span class="comment">            在Windows下一次调用transferTo方法最多发送的数据大小有限制(最多8M), 需要分段传输.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2.transferTo底层使用的是零拷贝</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> size = fileChannel.size();</span><br><span class="line">        <span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (position &lt; size) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> transfer = fileChannel.transferTo(position, fileChannel.size(), socketChannel);</span><br><span class="line">            System.out.println(<span class="string">"发送："</span> + transfer);</span><br><span class="line">            <span class="keyword">if</span> (transfer &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total += transfer;</span><br><span class="line">            position += transfer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            linux下直接加入以下代码即可</span></span><br><span class="line"><span class="comment">            long total = fileChannel.transferTo(0, fileChannel.size(), socketChannel)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"发送的总字节数: = "</span> + total + <span class="string">"耗时: "</span> + (System.currentTimeMillis() - startTime));</span><br><span class="line">        <span class="comment">/* 关闭 */</span></span><br><span class="line">        fileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    结果:    </p><p>        xxx.zip 文件大小: 13.4 MB (14,151,048 字节)     </p>    <p>       Client:        发送：8388608        发送：5762440        发送的总字节数: = 14151048耗时: 80    </p>    <p>        Server:         (比较长, 截取最后部分)         ...         4096        4096        4096        4096        4096        4096        4096        3484    </p><p></p>]]></content>
    
    <summary type="html">
    
      java NIO零拷贝实现
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="IO" scheme="https://www.kyralo.online/tagsP/IO/"/>
    
      <category term="NIO" scheme="https://www.kyralo.online/tagsP/NIO/"/>
    
      <category term="零拷贝" scheme="https://www.kyralo.online/tagsP/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习-java NIO编程</title>
    <link href="https://www.kyralo.online/2020/02/09/Netty%E5%AD%A6%E4%B9%A0-java-NIO%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.kyralo.online/2020/02/09/Netty学习-java-NIO编程/</id>
    <published>2020-02-08T16:31:15.000Z</published>
    <updated>2020-03-18T05:32:53.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一-Java-NIO-基本介绍"><a href="#一-Java-NIO-基本介绍" class="headerlink" title="一. Java NIO 基本介绍"></a>一. Java NIO 基本介绍</h4><p>    <ol>        <li>            Java Nio 是从JDK1.4以后提供的新API, 改进了输入输出, 被统称为NIO            (New IO), 是同步非阻塞的.        </li>        <li>            NIO 有三个核心部分: Channel(通道), Buffer(缓冲区), Selector(选择器)        </li>        <li>            NIO 是面向缓冲区(面向块)编程的.接受的数据被读取到一个缓冲区,需要时可以在缓冲区移动, 增加处理过程中的灵活性, 使用他可以提供非阻塞式的高伸缩性网络.        </li>        <li>            NIO 的非阻塞模式, 让一个线程从某通道发送请求或者读取数据, 但是他仅能获取当前可用的数据, 若当前没有数据可用, 就什么也不做, 不会保持线程阻塞, 直到数据变成可用之前, 该线程可以做其他事情.        </li>        <li>            NIO 可以做到用一个线程来处理多个操作, 比如 有大量连接发向服务端, 使用NIO            只需要启动少量线程就可以处理, 不需要向阻塞io那样使用对等数量的线程.        </li>        <li>            HTTP2.0 使用了多路复用技术, 使同一个连接可以并发处理多个请求, 并发量比HTTP1.1大了好几个数量级.        </li>    </ol></p><hr><h4 id="二-NIO主要工作流程"><a href="#二-NIO主要工作流程" class="headerlink" title="二. NIO主要工作流程"></a>二. NIO主要工作流程</h4><p><img src="https://view.2heng.xin/images/2020/02/07/netty-java-nio.png" alt> </p><h4 id="三-NIO-三大核心-Selector-Channel-Buffer-说明"><a href="#三-NIO-三大核心-Selector-Channel-Buffer-说明" class="headerlink" title="三. NIO 三大核心(Selector, Channel, Buffer)说明"></a>三. NIO 三大核心(Selector, Channel, Buffer)说明</h4><h5 id="1-Selector-Channel和Buffer关系图"><a href="#1-Selector-Channel和Buffer关系图" class="headerlink" title="1. Selector, Channel和Buffer关系图"></a>1. Selector, Channel和Buffer关系图</h5><p><img src="https://view.2heng.xin/images/2020/02/11/Nio.png" alt></p><p>    <ul>        <li>每个Channel都会对应一个Buffer</li>        <li>Selector对应一个线程, 一个线程对应多个Channel</li>        <li>Channel注册到Selector</li>        <li>Event决定Selector切换的Channel</li>        <li>Buffer就是一个内存块, 底层是一个数组</li>        <li>数据的读取和写入通过Buffer,(BIO中要么是输入流,要么是输出流,不能双向). NIO中的Buffer是可以读也可以写, 需要使用flip方法切换, Channel是爽向的, 有相关操作系统底层属性</li>    </ul></p><h5 id="2-Buffer-缓冲区"><a href="#2-Buffer-缓冲区" class="headerlink" title="2. Buffer (缓冲区)"></a>2. Buffer (缓冲区)</h5><h5 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="(1). 基本介绍"></a>(1). 基本介绍</h5><p>    缓冲区的本质是一个可以读写数据的内存块, 可以理解成一个容器对象,    该对象提供一组方法可以轻松地使用内存块, 缓冲区对象内置了一些机制,    可以跟踪和记录缓冲区的状态变化情况.    <span style="color: red">        Channel 提供从文件, 网络读取数据的渠道, 但是读取或者写入的数据        <span style="color: blue">必须经过Buffer</span>    </span>    <br>    </p><p>        NIO <--- data ---> 缓冲区 <--- channel ---> 文件    </---></---></p><p></p><h5 id="2-Buffer类及其子类"><a href="#2-Buffer类及其子类" class="headerlink" title="(2). Buffer类及其子类"></a>(2). Buffer类及其子类</h5><ul><li>Buffer (java.nio)<ul><li>IntBuffer (java.nio)<ul><li>DirectIntBufferU (java.nio)<ul><li>DirectIntBufferRU (java.nio)</li></ul></li><li>ByteBufferAsIntBufferL (java.nio)<ul><li>ByteBufferAsIntBufferRL (java.nio)</li></ul></li><li>DirectIntBufferS (java.nio)<ul><li>DirectIntBufferRS (java.nio)</li></ul></li><li>ByteBufferAsIntBufferB (java.nio)<ul><li>ByteBufferAsIntBufferRB (java.nio)</li></ul></li><li>HeapIntBuffer (java.nio)<ul><li>HeapIntBufferR (java.nio)</li></ul></li></ul></li><li>FloatBuffer (java.nio)<ul><li>ByteBufferAsFloatBufferB (java.nio)</li><li>DirectFloatBufferU (java.nio)</li><li>ByteBufferAsFloatBufferL (java.nio)</li><li>HeapFloatBuffer (java.nio)</li><li>DirectFloatBufferS (java.nio)</li></ul></li><li>CharBuffer (java.nio)<ul><li>ByteBufferAsCharBufferL (java.nio)</li><li>DirectCharBufferS (java.nio)</li><li>StringCharBuffer (java.nio)</li><li>HeapCharBuffer (java.nio)</li><li>ByteBufferAsCharBufferB (java.nio)</li><li>DirectCharBufferU (java.nio)</li></ul></li><li>DoubleBuffer (java.nio)<ul><li>HeapDoubleBuffer (java.nio)</li><li>DirectDoubleBufferU (java.nio)</li><li>ByteBufferAsDoubleBufferB (java.nio)</li><li>DirectDoubleBufferS (java.nio)</li><li>ByteBufferAsDoubleBufferL (java.nio)</li></ul></li><li>ShortBuffer (java.nio)<ul><li>DirectShortBufferU (java.nio)</li><li>ByteBufferAsShortBufferL (java.nio)</li><li>ByteBufferAsShortBufferB (java.nio)</li><li>HeapShortBuffer (java.nio)</li><li>DirectShortBufferS (java.nio)</li></ul></li><li>LongBuffer (java.nio)<ul><li>HeapLongBuffer (java.nio)</li><li>ByteBufferAsLongBufferB (java.nio)</li><li>DirectLongBufferU (java.nio)</li><li>ByteBufferAsLongBufferL (java.nio)</li><li>DirectLongBufferS (java.nio)</li></ul></li><li>ByteBuffer (java.nio)<ul><li>HeapByteBuffer (java.nio)</li><li>MappedByteBuffer (java.nio)</li></ul></li></ul></li></ul><h5 id="3-Buffer-重要属性"><a href="#3-Buffer-重要属性" class="headerlink" title="(3). Buffer 重要属性"></a>(3). Buffer 重要属性</h5><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Capactity</td><td>容量, 可以容纳的最大数据量, 在缓冲区创建时设定并且不能改变</td></tr><tr><td>Limit</td><td>表示缓冲区的当前终点, 不能对缓冲区超过极限的位置进行读写操作, 极限可以修改</td></tr><tr><td>Position</td><td>位置, 下一个要被读或写的元素的索引, 每次读写缓冲区数据时会改值,为下次读写做准备</td></tr><tr><td>Mark</td><td>标记</td></tr></tbody></table><h5 id="3-Channel-通道"><a href="#3-Channel-通道" class="headerlink" title="3. Channel(通道)"></a>3. Channel(通道)</h5><h5 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="(1) 基本介绍"></a>(1) 基本介绍</h5><p>    </p><p>* NIO的通道类似流, 但是有区别</p>    <ul>        <li>通道可以进行读写,而流只能读或者只能写</li>        <li>通道可以实现异步读写数据</li>        <li>通道可以从缓冲读取数据, 也可以写数据到缓冲</li>    </ul>    <br>    <p>* 常见的Channel类有:         FileChannel (用于文件的数据读写),         DatagramChannel (用于UDP的数据读写),         ServerSocketChannel 和 SocketChannel(用于TCP的数据读写)    </p><p></p><h5 id="2-使用FileChannel和ByteBuffer做代码演示"><a href="#2-使用FileChannel和ByteBuffer做代码演示" class="headerlink" title="(2) 使用FileChannel和ByteBuffer做代码演示"></a>(2) 使用FileChannel和ByteBuffer做代码演示</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入数据到本地文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> address 磁盘地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localWrite</span><span class="params">(String message, String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个输出流来获取channel */</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 通过fileOutputStream获取对应的FileChannel */</span></span><br><span class="line">    FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个缓冲区 ByteBuffer */</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将message放入 byteBuffer  (对于缓冲区来说,当前是写入的状态) */</span></span><br><span class="line">    byteBuffer.put(message.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将byteBuffer进行状态切换, 由写入状态转为读取状态 */</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将从byteBuffer中读取到的数据写入到channel */</span></span><br><span class="line">    fileChannel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">    fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从本地磁盘文件中读取数据并打印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> address 本地磁盘文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localRead</span><span class="params">(String address)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 从本地磁盘路径获取该文件的输出流 */</span></span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 通过fileInputStream获取对应的FileChannel */</span></span><br><span class="line">    FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个缓冲区 */</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate((<span class="keyword">int</span>)file.length());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将通道的数据读入到Buffer */</span></span><br><span class="line">    fileChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line"></span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-Selector"><a href="#4-Selector" class="headerlink" title="4.Selector"></a>4.Selector</h5><h5 id="1-基本介绍-2"><a href="#1-基本介绍-2" class="headerlink" title="(1) 基本介绍"></a>(1) 基本介绍</h5><p>    <ol>        <li>            Java的nio使用的是非阻塞的IO方式, 使用一个线程来处理多个客户端的连接时会使用到Selector        </li>        <li>            多个Channel可以注册到Selector上, Selector可以检测注册到其上的Channel,            如果有Event(事件)发生就会获取事件, 然后针对每个事件进行相应的处理.        </li>        <li>            Selector只有在通道真正有读写事件发生时才会进行读写, 这样大大地减少了系统开销, 并且不必为每个线程都创建一个线程, 减少系统资源消耗.        </li>        <li>            避免多线程之间的上下文切换导致的开销.        </li>        <li>            Netty的io线程NioEventLoop聚合了Selector(选择器, 或者说多路复用器),可以同时并发处理成百上千的客户端连接.        </li>    </ol></p><h5 id="2-Selector-相关方法说明"><a href="#2-Selector-相关方法说明" class="headerlink" title="(2) Selector 相关方法说明"></a>(2) Selector 相关方法说明</h5><ul>    <li>        selector.select() // 阻塞 <br>        selector.select( 1*1000 ) // 阻塞1秒, 一秒后返回    </li>    <li>        selector.wakeup() // 唤醒 selector    </li>    <li>        selector.selectNow() // 不阻塞, 立即返回    </li></ul><h5 id="3-Nio非阻塞网络编程原理分析"><a href="#3-Nio非阻塞网络编程原理分析" class="headerlink" title="(3) Nio非阻塞网络编程原理分析"></a>(3) Nio非阻塞网络编程原理分析</h5><p><img src="https://view.2heng.xin/images/2020/02/17/netty-java-nio-selector.png" alt="NIO(Selector, SelectionKey, ServerSocketChannel, SocketChannel)关系图"></p><p>    <ol>        <li>            当客户端连接时, 会通过ServerSocketChannel得到SocketChannel        </li>        <li>            Selector进行监听select方法, 返回有事件发生的通道数(ServerSocketChannel也会注册到Selector)        </li>        <li>            将socketChannel注册到Selector上, register(Selector sel, int ops), 一个Selector可以注册多个socketChannel        </li>        <li>            socketChannel注册后会返回一个SelectionKey, 并且和该Selector关联(集合)        </li>        <li>            可以通过socketChannel反向获取socketChannel        </li>        <li>            调用socketChannel的channel()方法可以进行相应的业务处理        </li>    </ol></p><h5 id="4-Nio非阻塞网络编程案例"><a href="#4-Nio非阻塞网络编程案例" class="headerlink" title="(4) Nio非阻塞网络编程案例"></a>(4) Nio非阻塞网络编程案例</h5><p>    <ul>        <li>nio入门, 实现简单服务端和客户端之间的数据通信(非阻塞)</li>    </ul></p><br><p>NioServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ServerSocketChannel 来获取serverSocket</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到一个Selector对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定端口8888, 在服务端监听</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把serverSocketChannel注册到selector监听事件上, 事件为OP_ACCEPT(连接建立)</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (selector.select(<span class="number">1000</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">/* System.out.println("服务器等待1s, 没有连接"); */</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                selector.selectedKeys() 可以获取到相关的selectionKey集合</span></span><br><span class="line"><span class="comment">                通过selectionKeys反向获取通道</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SelectionKey selectionKey : selectionKeys) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据key对应的通道发生的事件做相应处理</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                    <span class="comment">// 如果是OP_ACCEPT, 则有新的客户端连接</span></span><br><span class="line"></span><br><span class="line">                    SocketChannel socketChannel = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">assert</span> socketChannel != <span class="keyword">null</span>;</span><br><span class="line">                    System.out.println(<span class="string">"客户端连接成功: "</span> + socketChannel.hashCode());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将SocketChannel设置为非阻塞</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                       将socketChannel注册到selector, 关注事件为OP_READ, 同时给socketChannel关联一个Buffer</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClosedChannelException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">//发生OP_READ事件</span></span><br><span class="line">                        SocketChannel channel = (SocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 获取该channel关联的buffer</span></span><br><span class="line">                        ByteBuffer buffer = (ByteBuffer) selectionKey.attachment();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            channel.read(buffer);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"客户端: "</span> + <span class="keyword">new</span> String(buffer.array()));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    selectionKeys.remove(selectionKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>NioClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到一个网路连接</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置为非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供服务器端的ip和端口</span></span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!socketChannel.finishConnect())&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接需要时间, 连接未能完成, 但客户端不会阻塞"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把byte写入缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line"></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-SelectionKey"><a href="#5-SelectionKey" class="headerlink" title="5. SelectionKey"></a>5. SelectionKey</h4><p>    SelectionKey表示Selector和网络通道的注册关系, 分为四种: <br>    <ul>        <li>            int OP_ACCEPT: 有新的网络连接可以 accept, 值为16 (1<<4) < li>        <li>            int OP_CONNECT: 表示连接已经建立, 值为8 (1<<3) < li>        <li>            int OP_WRITE: 代表写操作, 值为4(1<<2) < li>        <li>            int OP_READ: 代表读操作, 值为1 (1<<0) < li>    </0)></li></2)></li></3)></li></4)></li></ul></p><br><p>    SelectionKey相关方法:<br>    <ul>        <li>            public abstract Selector selector(); // 得到与之关联的Selector对象        </li>        <li>            public abstract SelectableChannel channel(); //得到与之关联的通道        </li>        <li>            public abstract Object attachment(); //得到与之关联的共享数据        </li>        <li>            public abstract SelectionKey insterestOps(int ops); //设置或改变监听事件        </li>        <li>            public final boolean isAcceptable(); // 是否可accept                </li>        <li>            public final boolean isReadable(); // 是否可读        </li>        <li>            public final boolean isWritable(); // 是否可写        </li>    </ul></p>]]></content>
    
    <summary type="html">
    
      java NIO编程使用
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="IO" scheme="https://www.kyralo.online/tagsP/IO/"/>
    
      <category term="NIO" scheme="https://www.kyralo.online/tagsP/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习-java BIO编程</title>
    <link href="https://www.kyralo.online/2020/02/08/Netty%E5%AD%A6%E4%B9%A0-java-BIO%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.kyralo.online/2020/02/08/Netty学习-java-BIO编程/</id>
    <published>2020-02-08T06:57:18.000Z</published>
    <updated>2020-03-18T05:32:46.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一-Java-BIO-基本介绍"><a href="#一-Java-BIO-基本介绍" class="headerlink" title="一. Java BIO 基本介绍"></a>一. Java BIO 基本介绍</h4><ul><li><p>Java bio 就是传统java io</p></li><li><p>  同步且阻塞, 服务端实现为一个连接一个线程, 每当客户端有连接请求时就启动一个线程,  如果这个连接不做任何事就会造成线程资源浪费, 可以通过<span style="color: red">线程池机制</span>改善.</p></li><li><p>  bio方式适用于连接数目较小且固定的架构, 对服务器资源要求高, 并发局限于Application, JDK1.4以前的唯一选择.</p></li></ul><h4 id="二-Java-BIO-工作流程"><a href="#二-Java-BIO-工作流程" class="headerlink" title="二. Java BIO 工作流程"></a>二. Java BIO 工作流程</h4><p><img src="https://view.2heng.xin/images/2020/02/07/netty-java-bio.png" alt></p><h5 id="解读"><a href="#解读" class="headerlink" title="解读:"></a>解读:</h5><p>    <ol>        <li>            首先, 服务端启动一个ServerSocket        </li>        <li>            然后, 客户端启动Socket对服务器进行通信, 默认情况服务端每有一个客户端就启动一个线程与之通信        </li>        <li>            客户端发出请求后, 服务端会先查看有没有可用的线程, 若没有则让客户端等等,            或者直接拒绝连接; 如果有线程可用, 客户端会在连接请求结束后在继续执行.        </li>    </ol></p><h4 id="三-Java-BIO应用实例"><a href="#三-Java-BIO应用实例" class="headerlink" title="三. Java BIO应用实例"></a>三. Java BIO应用实例</h4><h5 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明:"></a>实例说明:</h5><p>    <ol>        <li>          使用BIO模型编写一个服务端, 单客户端有连接时, 就启动线程通信          </li>        <li>            使用线程池机制改善连接        </li>        <li>            服务端可以接收客户端发送的数据        </li>    </ol></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.DefaultThreadFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端消息处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket socket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"线程id = "</span> + Thread.currentThread().getId() +</span><br><span class="line">                    <span class="string">" 名字 = "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"线程id = "</span> + Thread.currentThread().getId() +</span><br><span class="line">                        <span class="string">" 名字 = "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"&gt;&gt;&gt; read ...."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, read));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"关闭client的连接"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        ExecutorService newCachedThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> SynchronousQueue&lt;&gt;(),</span><br><span class="line">                <span class="keyword">new</span> DefaultThreadFactory(<span class="string">"newCachedThreadPool"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SeverSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt; Server starting ...... "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    <span class="string">"线程id = "</span> + Thread.currentThread().getId() +</span><br><span class="line">                    <span class="string">" 名字 = "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt; waiting to connect ....."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             监听客户端连接, 没有连接时, </span></span><br><span class="line"><span class="comment">             serverSocket.accept()方法会 -&gt; 阻塞 &lt;- 在此,</span></span><br><span class="line"><span class="comment">             直到有客户端连接 </span></span><br><span class="line"><span class="comment">            */</span> </span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"连接到一个客户端"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 连接到一个客户端就从线程池里取线程执行</span></span><br><span class="line">            newCachedThreadPool.execute(() -&gt; handler(socket));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">连接到一个客户端</span><br><span class="line">线程id = 1 名字 = main</span><br><span class="line">&gt;&gt;&gt; waiting to connect .....</span><br><span class="line">连接到一个客户端</span><br><span class="line">线程id = 1 名字 = main</span><br><span class="line">&gt;&gt;&gt; waiting to connect .....</span><br><span class="line">线程id = 13 名字 = newCachedThreadPool-1-3</span><br><span class="line">线程id = 13 名字 = newCachedThreadPool-1-3</span><br><span class="line">&gt;&gt;&gt; read ....</span><br><span class="line">线程id = 14 名字 = newCachedThreadPool-1-4</span><br><span class="line">线程id = 14 名字 = newCachedThreadPool-1-4</span><br><span class="line">&gt;&gt;&gt; read ....</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.9 Safari/537.36</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Purpose: prefetch</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">线程id = 14 名字 = newCachedThreadPool-1-4</span><br><span class="line">&gt;&gt;&gt; read ....</span><br><span class="line">关闭client的连接</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.9 Safari/537.36</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">线程id = 13 名字 = newCachedThreadPool-1-3</span><br><span class="line">&gt;&gt;&gt; read ....</span><br><span class="line">关闭client的连接</span><br></pre></td></tr></table></figure><p>    从结果看, 发生了两次请求, 因为Google浏览器当你发送请求时会有一次请求    网站图标(/favicon.ico).    从线程信息打印的结果看, 客户端连接过程中并不是只使用一个线程,    说明线程池起到了作用</p>]]></content>
    
    <summary type="html">
    
      java BIO编程使用
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="IO" scheme="https://www.kyralo.online/tagsP/IO/"/>
    
      <category term="BIO" scheme="https://www.kyralo.online/tagsP/BIO/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习-IO编程</title>
    <link href="https://www.kyralo.online/2020/02/06/Netty%E5%AD%A6%E4%B9%A0-java-IO%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.kyralo.online/2020/02/06/Netty学习-java-IO编程/</id>
    <published>2020-02-06T09:46:24.000Z</published>
    <updated>2020-03-18T05:32:50.419Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="UNIX常见I-O模型"><a href="#UNIX常见I-O模型" class="headerlink" title="UNIX常见I/O模型"></a>UNIX常见I/O模型</h3><h4>基本说明</h4><article>    使用<span style="color: red">通道</span>进行数据的发送和接收, 程序通信的性能取决于什么样的<span style="color: red">通道</span>.    <p>        对于一次IO访问，<span style="color: red">数据会先被拷贝到操作系统内核的缓冲区中，然后再从操作系统内核的缓冲区拷贝到应用程序的地址空间。</span>    </p>    <p>        <span style="color: blue">当发生一个IO操作时，它会经历两个阶段：</span>        1. 等待数据准备        2. 将数据从内核拷贝到进程中    </p></article><hr><h5 id="BIO-blocking-I-O"><a href="#BIO-blocking-I-O" class="headerlink" title="BIO(blocking I/O):"></a>BIO(blocking I/O):</h5><article>    同步并阻塞模型, 为传统io模型, 主要模式为一个连接一个线程, 即当客户端有    连接请求时服务端才开启一个线程进行处理.    <p>        <span style="color: red">BIO的特点就是在IO执行的两个阶段都被锁住了</span>    </p></article><hr><h5 id="NIO-non-blocking-I-O"><a href="#NIO-non-blocking-I-O" class="headerlink" title="NIO(non-blocking I/O):"></a>NIO(non-blocking I/O):</h5><article>    同步非阻塞模型, 一个线程处理多个请求, 即客户端发送的请求先注册在多路复用器上,多路复用器经过轮询,遇到I/O请求就进行处理.    NIO三个核心对象：<span style="color: red">通道(Channel)</span>、<span style="color: red">缓冲区(Buffer)</span>和<span style="color: red">选择器(Selector)</span>    <p>        <span style="color: #EC6683">用户发出io请求后</span>, 如果第一阶段的内核数据还没有准备好, 用户进程不会进入等待(不会被锁住), 服务端会<span style="color: #40B260">立即</span>返回一个error, 用户进程收到结果后会<span style="color: #40B260">不断的</span>去请求, <span style="color: #40B260">直到</span>内核数据准备好,        然后进入第二阶段, (<span style="color: red">注:</span>但是第二阶段依然会有锁住的情况, NIO只是在数据准备阶段非阻塞)        </p><p style="color: red">所以特点是需要不断的主动询问kernel数据准备好了没有</p>    <p></p></article><hr><h5 id="IO多路复用-I-O-multiplexing"><a href="#IO多路复用-I-O-multiplexing" class="headerlink" title="IO多路复用(I/O multiplexing):"></a>IO多路复用(I/O multiplexing):</h5><article>    I/O多路复用模型, 又名事件驱动模型, 使用了<span style="color: red">Reactor</span>设计模式来实现,就是我们用的select，poll，epoll。当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。简单的说，就是和阻塞IO处理方式一样，但不同的是，select可以一下把很多很多文件描述符都传过来，然后操作系统内核同时监视他们，只要其中一个就绪，就及时处理那个，而不需要一个个等待处理。    <p>        但<span style="color: red">select、pselect、poll、epoll本质上都是同步I/O</span>，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的(异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。)        </p><p>            因而IO多路复用的性能可能比阻塞IO还要差，但<span style="color: red">他的优点在于能同时处理多个连接,相比较于同步非阻塞I/O，它的改进的地方在于，原来需要用户进程去轮询的这事儿交给了内核线程帮你完成</span>， 而且这个内核线程可以等待多个socket，能实现同时对多个IO端口进行监听。所以，如果处理的连接数不是很高的话，使用IO多路复用不一定比使用多线程+阻塞IO的性能更好，可能延迟还更大。        </p>    <p></p></article><hr><h5 id="AIO-Asynchronous-I-O"><a href="#AIO-Asynchronous-I-O" class="headerlink" title="AIO(Asynchronous I/O):"></a>AIO(Asynchronous I/O):</h5><article>    异步非阻塞, AIO 引入异步通道的概念, 采用<span style="color: red">Proactor</span>模式,     出现有效的请求才启动线程, 特点是先由操作系统完成后才会通知服务端    程序去启动线程处理,适用于连接数较多且连接时间较长的应用.</article><hr><h3 id="同步-异步IO-阻塞-非阻塞IO"><a href="#同步-异步IO-阻塞-非阻塞IO" class="headerlink" title="同步/异步IO,阻塞/非阻塞IO"></a>同步/异步IO,阻塞/非阻塞IO</h3><p><span style="font: 200;color: red">阻塞、非阻塞说的是调用者(Client)。同步、异步说的是被调用者(Server)。</span></p><p>    </p><p>        阻塞/非阻塞: 一个IO请求,在线程中进行，当这个IO请求没有数据或者没有有效数据拉来完成IO操作，那么这个请求不会结束，而是等待，而这个等待就是阻塞，因为他在等待数据，导致其他IO操作无法进行, 反之则为非阻塞.    </p>    <p>        同步/异步: 同步/异步IO的区分是针对完成实际的IO操作,笼统的说,同步IO就是<span style="color: blue">应用程序完成实际的IO操作</span>,而异步IO就是<span style="color: #8452AF">将实际的IO操作交给操作系统去完成</span>    </p><p></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><article>    <p>        阻塞IO：用户一直等操作系统内核完成2个阶段io操作，再继续    </p>    <p>        非阻塞IO：第一阶段用户一直问操作系统有没有准备好，第二阶段等操作系统完成。    </p>    <p>        IO多路复用：用户进程可以同时发多个网络连接IO，操作系统实施监控，虽然用户进程2个阶段都卡住了，但可以处理多个连接。    </p>    <p>        异步IO：用户进程完全把东西交给操作系统完成，自己不管了。    </p></article>]]></content>
    
    <summary type="html">
    
      常见io基本介绍
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IO" scheme="https://www.kyralo.online/tagsP/IO/"/>
    
      <category term="Linux" scheme="https://www.kyralo.online/tagsP/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习-netty介绍</title>
    <link href="https://www.kyralo.online/2020/02/05/Netty%E5%AD%A6%E4%B9%A0-netty%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.kyralo.online/2020/02/05/Netty学习-netty介绍/</id>
    <published>2020-02-05T13:42:40.000Z</published>
    <updated>2020-03-18T05:32:57.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-什么是netty"><a href="#一-什么是netty" class="headerlink" title="一. 什么是netty?"></a>一. 什么是netty?</h3><pre><code>(1) Netty是一个NIO客户端服务器框架,可以快速轻松地开发网络应用程序,例如协议服务器和客户端。它极大地简化和简化了网络编程，例如TCP和UDP套接字服务器(2) Netty是一个异步的, 基于事件驱动的网络应用框架,用以快速开发高性能高可靠性的网络I/O.(3) Netty主要针对TCP协议下,面向Clients端的高并发应用,或者P2P场景下大量数据应用.</code></pre><h3 id="二-应用场景"><a href="#二-应用场景" class="headerlink" title="二. 应用场景"></a>二. 应用场景</h3><h4 id="互联网行业"><a href="#互联网行业" class="headerlink" title="互联网行业"></a>互联网行业</h4><pre><code>分布式系统中,各个节点之间的远程服务调用依赖高性能的RPC框架,Netty因其卓越的异步通信高性能,经常作为这些RPC框架的基础通信组件.例如, Dubbo, Elasticsearch, Rabbitmq等.</code></pre><h4 id="游戏行业"><a href="#游戏行业" class="headerlink" title="游戏行业"></a>游戏行业</h4><pre><code>Netty是高性能的基础通信组件,提供了TCP/IP和HTTP协议栈,方便定制和开发私有协议栈,用于账号登录服务器.另外,地图服务器之间也可以方便的通过Netty进行高性能的通信.</code></pre><h4 id="大数据领域"><a href="#大数据领域" class="headerlink" title="大数据领域"></a>大数据领域</h4><pre><code>hadoop的高性能通信和序列化组件Avro的RPC框架默认采用Netty进行跨点通信</code></pre><h3 id="三-主要内容"><a href="#三-主要内容" class="headerlink" title="三. 主要内容"></a>三. 主要内容</h3><p><img src="https://netty.io/images/components.png" alt></p>]]></content>
    
    <summary type="html">
    
      netty的基本介绍及作用领域
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Netty" scheme="https://www.kyralo.online/tagsP/Netty/"/>
    
  </entry>
  
  <entry>
    <title>2020 新年第一刻</title>
    <link href="https://www.kyralo.online/2020/01/25/2020-%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E5%88%BB/"/>
    <id>https://www.kyralo.online/2020/01/25/2020-新年第一刻/</id>
    <published>2020-01-24T16:00:00.000Z</published>
    <updated>2020-03-18T05:32:29.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!--     <iframe      style="margin: auto;"      frameborder="no" border="0"      width=130% height=310      src="//music.163.com/outchain/player?type=0&id=2725346449&auto=0&height=430">    </iframe> --><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px; width:100%;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&userId=17&ext=.mp4","pic":"http://cdn.kyralo.online/blog-18.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><div class="new_year_2020"></div>]]></content>
    
    <summary type="html">
    
      2019年度总结及2020新展望
    
    </summary>
    
      <category term="生活" scheme="https://www.kyralo.online/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://www.kyralo.online/tagsP/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习之Dockerfile书写</title>
    <link href="https://www.kyralo.online/2019/12/20/Docker%E5%AD%A6%E4%B9%A0%E4%B9%8BDockerfile%E4%B9%A6%E5%86%99/"/>
    <id>https://www.kyralo.online/2019/12/20/Docker学习之Dockerfile书写/</id>
    <published>2019-12-20T01:46:05.000Z</published>
    <updated>2020-03-18T05:32:32.051Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Dockerfile的定义"><a href="#Dockerfile的定义" class="headerlink" title="Dockerfile的定义"></a>Dockerfile的定义</h3><pre><code>Dockerfile是一个包含用于组合映像的命令的文本文档, Docker通过读取Dockerfile中的指令自动生成映像。构建镜像时使用docker build命令构建,可以在docker build命令中使用-f标志指向文件系统中任何位置的Dockerfile。</code></pre><h3 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h3><pre><code>基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令`#` 为Dockerfile的注释为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令.</code></pre><h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM: </span><br><span class="line">指定基础镜像,第一个命令必填.</span><br><span class="line"></span><br><span class="line">e.g </span><br><span class="line">FROM mysql:8.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LABEL:</span><br><span class="line">添加标签,帮助组织镜像、记录许可信息、辅助自动化构建等</span><br><span class="line"></span><br><span class="line">e.g</span><br><span class="line">LABEL com.example.version=&quot;0.0.1-beta&quot;</span><br><span class="line"></span><br><span class="line">LABEL vendor=&quot;ACME Incorporated&quot;</span><br><span class="line"></span><br><span class="line">LABEL com.example.release-date=&quot;2019-12-20&quot;</span><br><span class="line"></span><br><span class="line">LABEL com.example.version.is-production=&quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RUN:</span><br><span class="line">用于在镜像容器中执行命令</span><br><span class="line">有以下两种命令执行方式：</span><br><span class="line">shell执行:</span><br><span class="line">    RUN &lt;command&gt;</span><br><span class="line">    e.g RUN ls /</span><br><span class="line"></span><br><span class="line">exec执行:</span><br><span class="line">    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line"></span><br><span class="line">    e.g </span><br><span class="line">    RUN apk update</span><br><span class="line">    RUN [&quot;/etc/execfile&quot;, &quot;arg1&quot;, &quot;arg1&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">    RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。</span><br><span class="line">    如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，</span><br><span class="line">    如：docker build --no-cache</span><br><span class="line">    此外,不要使用 RUN apt-get(yum) upgrade 或 dist-upgrade，</span><br><span class="line">    因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。</span><br><span class="line">    如果基础镜像中的某个包过时了，你应该联系它的维护者。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CMD:</span><br><span class="line">用于执行目标镜像中包含的软件,可以包含参数</span><br><span class="line">构建容器后调用，也就是在容器启动时才进行调用</span><br><span class="line">格式: CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;...]</span><br><span class="line">e.g </span><br><span class="line">CMD [&quot;apache2&quot;, &quot;-DFOREGROUND&quot;]</span><br><span class="line"></span><br><span class="line">多数情况下，CMD 都需要一个交互式的 shell (bash, Python, perl 等)</span><br><span class="line">如 CMD [&quot;PHP&quot;, &quot;-a&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE:</span><br><span class="line">指定于外界交互的端口</span><br><span class="line"></span><br><span class="line">格式: EXPOSE 8080</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ENV:</span><br><span class="line">设置环境变量</span><br><span class="line">为容器中安装的程序更新 PATH 环境变量</span><br><span class="line"></span><br><span class="line">e.g</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8</span><br><span class="line">ENV PATH /usr/local/nginx/bin:$PATH</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ADD 和 COPY :</span><br><span class="line">ADD 和 COPY 功能类似,一般优先使用 COPY,它比 ADD 更透明</span><br><span class="line">COPY 只支持简单将本地文件拷贝到容器中</span><br><span class="line">ADD 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）</span><br><span class="line">ADD 的最佳用例是将本地 tar 文件自动提取到镜像中 (ADD rootfs.tar.xz)</span><br><span class="line"></span><br><span class="line">如果Dockerfile中有多个步骤需要使用上下文中不同的文件。</span><br><span class="line">单独COPY每个文件，而不是一次性的COPY所有文件,</span><br><span class="line">这将保证每个步骤的构建缓存只在特定的文件变化时失效</span><br><span class="line"></span><br><span class="line">为了让镜像尽量小，最好不要使用 ADD 指令从远程 URL 获取包，</span><br><span class="line">而是使用 curl 和 wget</span><br><span class="line">这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层</span><br><span class="line"></span><br><span class="line">最好使用如下写法:</span><br><span class="line">    RUN mkdir -p /usr/src/things \</span><br><span class="line">        &amp;&amp; curl -SL http://example.com/big.tar.xz \</span><br><span class="line">        | tar -xJC /usr/src/things \</span><br><span class="line">        &amp;&amp; make -C /usr/src/things all</span><br><span class="line"></span><br><span class="line">(上面使用的管道操作，所以没有中间文件需要删除,即不需要额外删除big.tar.xz。)</span><br><span class="line"></span><br><span class="line">而不是</span><br><span class="line">    ADD http://example.com/big.tar.xz /usr/src/things/</span><br><span class="line"></span><br><span class="line">对于其他不需要 ADD 的自动提取功能的文件或目录，你应该使用 COPY。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT:</span><br><span class="line">配置容器，使其可执行化</span><br><span class="line">ENTRYPOINT 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行</span><br><span class="line">e.g:</span><br><span class="line">    ENTRYPOINT [&quot;demo&quot;]</span><br><span class="line">    CMD [&quot;--help&quot;]</span><br><span class="line">    docker run demo</span><br><span class="line"></span><br><span class="line">ENTRYPOINT 指令也可以结合一个辅助脚本使用，和命令行风格类似</span><br><span class="line">e.g</span><br><span class="line">脚本被拷贝到容器，并在容器启动时通过 ENTRYPOINT 执行：</span><br><span class="line">COPY ./demo.sh /</span><br><span class="line">ENTRYPOINT [&quot;/demo.sh&quot;]</span><br><span class="line">该脚本可以让用户用几种不同的方式和应用交互</span><br><span class="line">1. 简单地启动 (docker run app)</span><br><span class="line">2. 传递参数 (docker run app app --help)</span><br><span class="line">3. 启动其他工具 (docker run --rm -it app bash)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VOLUME 指令用于暴露任何数据库存储文件，</span><br><span class="line">配置文件，或容器创建的文件和目录</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">    VOLUME [&quot;/path/to/dir&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">USER:</span><br><span class="line">指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户</span><br><span class="line">使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合</span><br><span class="line">当服务不需要管理员权限时，可以通过该命令指定运行用户,</span><br><span class="line">并且可以在之前创建所需要的用户</span><br><span class="line"></span><br><span class="line">格式:</span><br><span class="line">　　USER user</span><br><span class="line">　　USER user:group</span><br><span class="line">　　USER uid</span><br><span class="line">　　USER uid:gid</span><br><span class="line">　　USER user:gid</span><br><span class="line">　　USER uid:group</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR:</span><br><span class="line">工作目录，类似于cd命令</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">    WORKDIR /path/to/workdir</span><br><span class="line"></span><br><span class="line">通过WORKDIR设置工作目录后，</span><br><span class="line">Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令</span><br><span class="line">都会在该目录下执行在使用docker run运行容器时 可以通过-w参数覆盖构建时所设置的工作目录。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Dockerfile书写
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://www.kyralo.online/tagsP/Docker/"/>
    
      <category term="Dockerfile" scheme="https://www.kyralo.online/tagsP/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>SSH 远程链接数据库</title>
    <link href="https://www.kyralo.online/2019/12/07/SSH-%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.kyralo.online/2019/12/07/SSH-远程链接数据库/</id>
    <published>2019-12-06T16:22:09.000Z</published>
    <updated>2020-03-18T05:33:38.663Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Docker-拉取-MySQL"><a href="#Docker-拉取-MySQL" class="headerlink" title="Docker 拉取 MySQL"></a>Docker 拉取 MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 拉取 MySQL 容器 (默认为MySQL8.0)</span><br><span class="line"><span class="meta">#</span> mysql8.0 去除 MyTSAM(引擎) 只保留 InnoDB(支持事务)</span><br><span class="line"><span class="meta">#</span> 由于要向互联网企业转型, 所以8.0的mysql支持原生分布式数据库解决方案</span><br><span class="line">docker pull mysql/mysql-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动一个mysql容器</span><br><span class="line">docker run --name mysql -p 3306:3306 \</span><br><span class="line">-v /usr/local/docker/mysql/conf:/etc/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/logs:/var/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql/mysql-server</span><br></pre></td></tr></table></figure><h3 id="MySQL-配置"><a href="#MySQL-配置" class="headerlink" title="MySQL 配置"></a>MySQL 配置</h3><pre><code>登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%”，然后重启mysql这样就允许所有的远程机器进行访问了。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">use mysql;</span><br><span class="line">use mysql;</span><br><span class="line">update user set host = ‘%’ where user = ‘root’;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></code></pre><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> /etc/ssh 目录下sshd_config文件部分配置</span><br><span class="line">Port 22</span><br><span class="line">ListenAddress 0.0.0.0                          </span><br><span class="line">ListenAddress ::                          </span><br><span class="line">PermitRootLogin no                          </span><br><span class="line">RSAAuthentication yes                          </span><br><span class="line">PubkeyAuthentication yes                          </span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><h3 id="SSH链接数据库"><a href="#SSH链接数据库" class="headerlink" title="SSH链接数据库"></a>SSH链接数据库</h3><pre><code>链接数据库时需要配置3个属性:useSSL=falseserverTimezone=UTCallowPublicKeyRetrieval=true如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；但是需要注意的是AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启。</code></pre>]]></content>
    
    <summary type="html">
    
      SSH 远程链接数据库
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://www.kyralo.online/tagsP/Docker/"/>
    
      <category term="MySQL" scheme="https://www.kyralo.online/tagsP/MySQL/"/>
    
      <category term="SSH" scheme="https://www.kyralo.online/tagsP/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Netty的组件与设计</title>
    <link href="https://www.kyralo.online/2019/10/13/Netty%E7%9A%84%E7%BB%84%E4%BB%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.kyralo.online/2019/10/13/Netty的组件与设计/</id>
    <published>2019-10-13T07:54:04.000Z</published>
    <updated>2020-03-18T05:33:06.058Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Channel-EventLoop-ChannelFuture"><a href="#Channel-EventLoop-ChannelFuture" class="headerlink" title="Channel,EventLoop,ChannelFuture"></a>Channel,EventLoop,ChannelFuture</h3><ul><li>Channel —– Socket;</li><li>EventLoop —– 控制流,多线程,并发;</li><li>ChannelFuture —– 异步通知;</li></ul><h4 id="Channel-接口"><a href="#Channel-接口" class="headerlink" title="Channel 接口"></a>Channel 接口</h4><pre><code>基本的 I/O 操作（bind()、connect()、read()和write()）依赖于底层网络传输所提供的原语。在基于 Java 的网络编程中，其基本的构造是 class Socket.Netty 的 Channel 接口所提供的 API，大大地降低了直接使用 Socket 类的复杂性.</code></pre><p>Channel 拥有许多预定义的、专门化实现的广泛类层次结构的根:</p><ul><li>EmbeddedChann</li><li>LocalServerChannel</li><li>NioDatagramChannel</li><li>NioSctpChannel</li><li>NioSocketChannel</li></ul><h4 id="EventLoop-接口"><a href="#EventLoop-接口" class="headerlink" title="EventLoop 接口"></a>EventLoop 接口</h4><pre><code>EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件。</code></pre><h5 id="Channel、EventLoop、Thread-以及-EventLoopGroup-之间的关系"><a href="#Channel、EventLoop、Thread-以及-EventLoopGroup-之间的关系" class="headerlink" title="Channel、EventLoop、Thread 以及 EventLoopGroup 之间的关系:"></a>Channel、EventLoop、Thread 以及 EventLoopGroup 之间的关系:</h5><p><img src="https://view.moezx.cc/images/2019/10/13/netty.png" alt></p><p>#####关系</p><ul><li>一个 EventLoopGroup 包含一个或者多个 EventLoop</li><li>一个 EventLoop 在它的生命周期内只和一个 Thread 绑定</li><li>所有由 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理</li><li>一个 Channel 在它的生命周期内只注册于一个 EventLoopGroup</li><li>一个 EventLoop 可能会被分配给一个或多个 Channel</li></ul><p style="color: red">注意:在这种设计中，一个给定 Channel 的 I/O 操作都是由相同的 Thread 执行的，实际上消除了对于同步的需要。</p><h4 id="ChannelFuture-接口"><a href="#ChannelFuture-接口" class="headerlink" title="ChannelFuture 接口"></a>ChannelFuture 接口</h4><pre><code>Netty 中所有的 I/O 操作都是异步的,因为一个操作可能不会立即返回，所以我们需要一种用于在之后的某个时间点确定其结果的方法。为此，Netty提供了ChannelFuture接口，addListener()方法注册了一个ChannelFutureListener，以便在某个操作完成时（无论是否成功）得到通知。可以将 ChannelFuture 看作是将来要执行的操作的结果的占位符。它究竟什么时候被执行则可能取决于若干的因素，因此不可能准确地预测，但是可以肯定的是它将会被执行。此外，所有属于同一个 Channel 的操作都被保证其将以它们被调用的顺序被执行.</code></pre><h3 id="ChannelHandler-和-ChannelPipeline"><a href="#ChannelHandler-和-ChannelPipeline" class="headerlink" title="ChannelHandler 和 ChannelPipeline"></a>ChannelHandler 和 ChannelPipeline</h3><p>些管理数据流以及执行应用程序处理逻辑的组件</p><h4 id="ChannelHandler-接口"><a href="#ChannelHandler-接口" class="headerlink" title="ChannelHandler 接口"></a>ChannelHandler 接口</h4><pre><code>Netty 的主要组件是 ChannelHandler，它充当了所有处理入站和出站数据的应用程序逻辑的容器.事实上，ChannelHandler 可专门用于几乎任何类型的动作，例如将数据从一种格式转换为另外一种格式，或者处理转换过程中所抛出的异常.</code></pre><p>eg:<br>    ChannelInboundHandler 是一个你将会经常实现的子接口。这种类型的ChannelHandler<br>    接收入站事件和数据，这些数据随后将会被你的应用程序的业务逻辑所处理。当你要给连接的客户<br>    端发送响应时，也可以从ChannelInboundHandler冲刷数据。你的应用程序的业务逻辑通常驻<br>    留在一个或者多个 ChannelInboundHandler中.</p><h4 id="ChannelPipeline-接口"><a href="#ChannelPipeline-接口" class="headerlink" title="ChannelPipeline 接口"></a>ChannelPipeline 接口</h4><pre><code>ChannelPipeline 提供了 ChannelHandler 链的容器，并定义了用于在该链上传播入站</code></pre><p>和出站事件流的 API。当 Channel 被创建时，它会被自动地分配到它专属的 ChannelPipeline。</p><p>ChannelHandler 安装到 ChannelPipeline 中的过程如下所示：</p><ul><li>一个ChannelInitializer的实现被注册到了ServerBootstrap中</li><li>当 ChannelInitializer.initChannel()方法被调用时，ChannelInitializer将在 ChannelPipeline 中安装一组自定义的 ChannelHandler</li><li>ChannelInitializer 将它自己从 ChannelPipeline 中移除</li></ul><h5 id="ChannelPipeline-和-ChannelHandler-之间的共生关系"><a href="#ChannelPipeline-和-ChannelHandler-之间的共生关系" class="headerlink" title="ChannelPipeline 和 ChannelHandler 之间的共生关系"></a>ChannelPipeline 和 ChannelHandler 之间的共生关系</h5><pre><code>ChannelHandler是专为支持广泛的用途而设计的,可以将它看作是处理往来ChannelPipeline 事件（包括数据）的任何代码的通用容器。ChannelInboundHandler 和 ChannelOutboundHandler 接口是由ChannelHandler 派生的使得事件流经 ChannelPipeline 是 ChannelHandler 的工作，它们是在应用程序的初始化或者引导阶段被安装的。这些对象接收事件、执行它们所实现的处理逻辑，并将数据传递给链中的下一个ChannelHandler。它们的执行顺序是由它们被添加的顺序所决定的。实际上，被我们称为 ChannelPipeline 的是这些 ChannelHandler 的编排顺序.</code></pre><p>一个 Netty 应用程序中入站和出站数据流之间的区别:<br><img src="https://view.moezx.cc/images/2019/10/13/Netty.png" alt></p><pre><code>入站和出站 ChannelHandler 可以被安装到同一个ChannelPipeline中。如果一个消息或者任何其他的入站事件被读取，那么它会从ChannelPipeline的头部开始流动，并被传递给第一个ChannelInboundHandler.这个 ChannelHandler不一定会实际地修改数据，具体取决于它的具体功能,在这之后，数据将会被传递给链中的下一个ChannelInboundHandler.最终,数据将会到达ChannelPipeline 的尾端，届时，所有处理就都结束了.数据的出站运动（即正在被写的数据）在概念上也是一样的.在这种情况下，数据将从ChannelOutboundHandler链的尾端开始流动，直到它到达链的头部为止.在这之后，出站数据将会到达网络传输层，这里显示为Socket.通常情况下，这将触发一个写操作.</code></pre><p>入站和出站 ChannelHandler 的更多讨论:</p><pre><code>通过使用作为参数传递到每个方法的 ChannelHandlerContext，事件可以被传递给当前ChannelHandler链中的下一个ChannelHandler。因为你有时会忽略那些不感兴趣的事件,所以 Netty提供了抽象基类ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter.通过调用ChannelHandlerContext上的对应方法，每个都提供了简单地将事件传递给下一个ChannelHandler的方法的实现。随后，你可以通过重写你所感兴趣的那些方法来扩展这些类.在 Netty 中，有两种发送消息的方式。你可以直接写到 Channel 中，也可以 写到和 ChannelHandler相关联的ChannelHandlerContext对象中。前一种方式将会导致消息从ChannelPipeline 的尾端开始流动，而后者将导致消息从 ChannelPipeline 中的下一个 ChannelHandler 开始流动.</code></pre>]]></content>
    
    <summary type="html">
    
      Netty的组件与设计
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Netty" scheme="https://www.kyralo.online/tagsP/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Go Xorm框架笔记</title>
    <link href="https://www.kyralo.online/2019/09/17/Golang-Xorm%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.kyralo.online/2019/09/17/Golang-Xorm框架笔记/</id>
    <published>2019-09-17T01:36:38.000Z</published>
    <updated>2020-03-18T05:32:40.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、创建engine"><a href="#一、创建engine" class="headerlink" title="一、创建engine"></a>一、创建engine</h3><pre><code>engine, err := xorm.NewEngine(driverName, dataSourceName)上述代码创建了一个数据库引擎，可以在一个程序中创建多个engine。</code></pre><h3 id="二、查询方法："><a href="#二、查询方法：" class="headerlink" title="二、查询方法："></a>二、查询方法：</h3><h4 id="2-1、支持sql查询："><a href="#2-1、支持sql查询：" class="headerlink" title="2.1、支持sql查询："></a>2.1、支持sql查询：</h4><pre><code>1、查询一个string类型的sql，返回[]map[string][]byte类型的切片（查询）results, err := engine.Query(&quot;select * from user&quot;)2、执行一个string的sql，返回结果影响行数（增删改）affected, err := engine.Exec(&quot;update user set .... where ...&quot;)</code></pre><h4 id="2-2、ORM方法："><a href="#2-2、ORM方法：" class="headerlink" title="2.2、ORM方法："></a>2.2、ORM方法：</h4><h3 id="主要有七个方法和其他辅助的方法来操作数据库。"><a href="#主要有七个方法和其他辅助的方法来操作数据库。" class="headerlink" title="主要有七个方法和其他辅助的方法来操作数据库。"></a>主要有七个方法和其他辅助的方法来操作数据库。</h3><p>　　1、插入一个或者多个数据：</p><pre><code>affected, err := engine.Insert(&amp;struct)// INSERT INTO struct () values ()affected, err := engine.Insert(&amp;struct1, &amp;struct2)// INSERT INTO struct1 () values ()// INSERT INTO struct2 () values ()affected, err := engine.Insert(&amp;sliceOfStruct)// INSERT INTO struct () values (),(),()affected, err := engine.Insert(&amp;struct1, &amp;sliceOfStruct2)// INSERT INTO struct1 () values ()// INSERT INTO struct2 () values (),(),()has, err := engine.Get(&amp;user)// SELECT * FROM user LIMIT 1</code></pre><p>　　3、从数据库中查询多条记录：</p><pre><code>sliceOfStructs := new(Struct)err := engine.Find(sliceOfStructs)// SELECT * FROM user</code></pre><p>　　4、查询多条记录，然后每条记录进行处理，有两个方法，一个是iterator，另一个是raw：</p><pre><code>err := engine.Iterate(...)// SELECT * FROM userraws, err := engine.Raws(...)// SELECT * FROM userbean := new(Struct)for raws.Next() {    err = raws.Scan(bean)}</code></pre><p>　　5、更新一条或者多条记录：</p><pre><code>affected, err := engine.Update(&amp;user)// UPDATE user SET ...　　6：删除一条或者多条记录，必须存在删除条件affected, err := engine.Where(...).Delete(&amp;user)// DELETE FROM user Where ...</code></pre><p>　　7、查询记录条数:</p><pre><code>counts, err := engine.Count(&amp;user)// SELECT count(*) AS total FROM user</code></pre><h4 id="2-3：条件："><a href="#2-3：条件：" class="headerlink" title="2.3：条件："></a>2.3：条件：</h4><p>　　1、Id、In：</p><pre><code>engine.Id(1).Get(&amp;user) // for single primary key// SELECT * FROM user WHERE id = 1engine.Id(core.PK{1, 2}).Get(&amp;user) // for composite primary keys// SELECT * FROM user WHERE id1 = 1 AND id2 = 2engine.In(&quot;id&quot;, 1, 2, 3).Find(&amp;users)// SELECT * FROM user WHERE id IN (1, 2, 3)engine.In(&quot;id&quot;, []int{1, 2, 3})// SELECT * FROM user WHERE id IN (1, 2, 3)</code></pre><p>　　2、 Where, And, Or</p><pre><code>engine.Where().And().Or().Find()// SELECT * FROM user WHERE (.. AND ..) OR ...</code></pre><p>　　3、OrderBy, Asc, Desc</p><pre><code>engine.Asc().Desc().Find()// SELECT * FROM user ORDER BY .. ASC, .. DESCengine.OrderBy().Find()// SELECT * FROM user ORDER BY ..</code></pre><p>　　4、 Limit, Top</p><pre><code>engine.Limit().Find()// SELECT * FROM user LIMIT .. OFFSET ..engine.Top(5).Find()// SELECT TOP 5 * FROM user // for mssql// SELECT * FROM user LIMIT .. OFFSET 0 //for other databases</code></pre><p>　　5、Sql, 查询原生SQL</p><pre><code>engine.Sql(&quot;select * from user&quot;).Find()</code></pre><p>　　6、Cols, Omit, Distinct</p><pre><code>engine.Cols(&quot;col1, col2&quot;).Find()// SELECT col1, col2 FROM userengine.Cols(&quot;col1&quot;, &quot;col2&quot;).Where().Update(user)// UPDATE user set col1 = ?, col2 = ? Where ...engine.Omit(&quot;col1&quot;).Find()// SELECT col2, col3 FROM userengine.Omit(&quot;col1&quot;).Insert()// INSERT INTO table (non-col1) VALUES ()engine.Distinct(&quot;col1&quot;).Find()// SELECT DISTINCT col1 FROM user</code></pre><p>　　7、Join, GroupBy, Having</p><pre><code>engine.GroupBy(&quot;name&quot;).Having(&quot;name=&apos;xlw&apos;&quot;).Find()//SELECT * FROM user GROUP BY name HAVING name=&apos;xlw&apos;engine.Join(&quot;LEFT&quot;, &quot;userdetail&quot;, &quot;user.id=userdetail.id&quot;).Find()//SELECT * FROM user LEFT JOIN userdetail ON user.id=userdetail.id</code></pre>]]></content>
    
    <summary type="html">
    
      xorm学习
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Go" scheme="https://www.kyralo.online/tagsP/Go/"/>
    
      <category term="Xorm" scheme="https://www.kyralo.online/tagsP/Xorm/"/>
    
  </entry>
  
  <entry>
    <title>Docker常见命令</title>
    <link href="https://www.kyralo.online/2019/09/03/Docker%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.kyralo.online/2019/09/03/Docker常见命令/</id>
    <published>2019-09-03T05:23:34.000Z</published>
    <updated>2020-03-18T05:32:37.932Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="容器相关操作"><a href="#容器相关操作" class="headerlink" title="容器相关操作"></a>容器相关操作</h3><h4 id="创建一个容器但是不启动它"><a href="#创建一个容器但是不启动它" class="headerlink" title="创建一个容器但是不启动它"></a>创建一个容器但是不启动它</h4><pre><code>docker create</code></pre><h4 id="创建并启动一个容器"><a href="#创建并启动一个容器" class="headerlink" title="创建并启动一个容器"></a>创建并启动一个容器</h4><pre><code>docker run</code></pre><h4 id="停止容器运行，发送信号SIGTERM"><a href="#停止容器运行，发送信号SIGTERM" class="headerlink" title="停止容器运行，发送信号SIGTERM"></a>停止容器运行，发送信号SIGTERM</h4><pre><code>docker stop</code></pre><h4 id="启动一个停止状态的容器"><a href="#启动一个停止状态的容器" class="headerlink" title="启动一个停止状态的容器"></a>启动一个停止状态的容器</h4><pre><code>docker start</code></pre><h4 id="重启一个容器"><a href="#重启一个容器" class="headerlink" title="重启一个容器"></a>重启一个容器</h4><pre><code>docker restart</code></pre><h4 id="删除一个容器"><a href="#删除一个容器" class="headerlink" title="删除一个容器"></a>删除一个容器</h4><pre><code>docker rm</code></pre><h4 id="发送信号给容器，默认SIGKILL"><a href="#发送信号给容器，默认SIGKILL" class="headerlink" title="发送信号给容器，默认SIGKILL"></a>发送信号给容器，默认SIGKILL</h4><pre><code>docker kill</code></pre><h4 id="连接-进入-到一个正在运行的容器"><a href="#连接-进入-到一个正在运行的容器" class="headerlink" title="连接(进入)到一个正在运行的容器"></a>连接(进入)到一个正在运行的容器</h4><pre><code>docker attach</code></pre><h4 id="阻塞到一个容器，直到容器停止运行"><a href="#阻塞到一个容器，直到容器停止运行" class="headerlink" title="阻塞到一个容器，直到容器停止运行"></a>阻塞到一个容器，直到容器停止运行</h4><pre><code>docker wait</code></pre><h4 id="获取容器相关信息"><a href="#获取容器相关信息" class="headerlink" title="获取容器相关信息"></a>获取容器相关信息</h4><h4 id="显示状态为运行（Up）的容器"><a href="#显示状态为运行（Up）的容器" class="headerlink" title="显示状态为运行（Up）的容器"></a>显示状态为运行（Up）的容器</h4><pre><code>docker ps</code></pre><h4 id="显示所有容器-包括运行中（Up）的和退出的-Exited"><a href="#显示所有容器-包括运行中（Up）的和退出的-Exited" class="headerlink" title="显示所有容器,包括运行中（Up）的和退出的(Exited)"></a>显示所有容器,包括运行中（Up）的和退出的(Exited)</h4><pre><code>docker ps -a</code></pre><h4 id="深入容器内部获取容器所有信息"><a href="#深入容器内部获取容器所有信息" class="headerlink" title="深入容器内部获取容器所有信息"></a>深入容器内部获取容器所有信息</h4><pre><code>docker inspect</code></pre><h4 id="查看容器的日志-stdout-stderr"><a href="#查看容器的日志-stdout-stderr" class="headerlink" title="查看容器的日志(stdout/stderr)"></a>查看容器的日志(stdout/stderr)</h4><pre><code>docker logs</code></pre><h4 id="得到docker服务器的实时的事件"><a href="#得到docker服务器的实时的事件" class="headerlink" title="得到docker服务器的实时的事件"></a>得到docker服务器的实时的事件</h4><pre><code>docker events</code></pre><h4 id="显示容器的端口映射"><a href="#显示容器的端口映射" class="headerlink" title="显示容器的端口映射"></a>显示容器的端口映射</h4><pre><code>docker port</code></pre><h4 id="显示容器的进程信息"><a href="#显示容器的进程信息" class="headerlink" title="显示容器的进程信息"></a>显示容器的进程信息</h4><pre><code>docker top</code></pre><h4 id="显示容器文件系统的前后变化"><a href="#显示容器文件系统的前后变化" class="headerlink" title="显示容器文件系统的前后变化"></a>显示容器文件系统的前后变化</h4><pre><code>docker diff</code></pre><h4 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h4><h4 id="从容器里向外拷贝文件或目录"><a href="#从容器里向外拷贝文件或目录" class="headerlink" title="从容器里向外拷贝文件或目录"></a>从容器里向外拷贝文件或目录</h4><pre><code>docker cp</code></pre><h4 id="将容器整个文件系统导出为一个tar包，不带layers、tag等信息"><a href="#将容器整个文件系统导出为一个tar包，不带layers、tag等信息" class="headerlink" title="将容器整个文件系统导出为一个tar包，不带layers、tag等信息"></a>将容器整个文件系统导出为一个tar包，不带layers、tag等信息</h4><pre><code>docker export</code></pre><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><h4 id="在容器里执行一个命令，可以执行bash进入交互式"><a href="#在容器里执行一个命令，可以执行bash进入交互式" class="headerlink" title="在容器里执行一个命令，可以执行bash进入交互式"></a>在容器里执行一个命令，可以执行bash进入交互式</h4><pre><code>docker exec</code></pre><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><h4 id="显示本地所有的镜像列表"><a href="#显示本地所有的镜像列表" class="headerlink" title="显示本地所有的镜像列表"></a>显示本地所有的镜像列表</h4><pre><code>docker images</code></pre><h4 id="从一个tar包创建一个镜像，往往和export结合使用"><a href="#从一个tar包创建一个镜像，往往和export结合使用" class="headerlink" title="从一个tar包创建一个镜像，往往和export结合使用"></a>从一个tar包创建一个镜像，往往和export结合使用</h4><pre><code>docker import</code></pre><h4 id="使用Dockerfile创建镜像（推荐）"><a href="#使用Dockerfile创建镜像（推荐）" class="headerlink" title="使用Dockerfile创建镜像（推荐）"></a>使用Dockerfile创建镜像（推荐）</h4><pre><code>docker build</code></pre><h4 id="从容器创建镜像"><a href="#从容器创建镜像" class="headerlink" title="从容器创建镜像"></a>从容器创建镜像</h4><pre><code>docker commit</code></pre><h4 id="删除一个镜像"><a href="#删除一个镜像" class="headerlink" title="删除一个镜像"></a>删除一个镜像</h4><pre><code>docker rmi</code></pre><h4 id="从一个tar包创建一个镜像，和save配合使用"><a href="#从一个tar包创建一个镜像，和save配合使用" class="headerlink" title="从一个tar包创建一个镜像，和save配合使用"></a>从一个tar包创建一个镜像，和save配合使用</h4><pre><code>docker load</code></pre><h4 id="将一个镜像保存为一个tar包，带layers和tag信息"><a href="#将一个镜像保存为一个tar包，带layers和tag信息" class="headerlink" title="将一个镜像保存为一个tar包，带layers和tag信息"></a>将一个镜像保存为一个tar包，带layers和tag信息</h4><pre><code>docker save</code></pre><h4 id="显示生成一个镜像的历史命令"><a href="#显示生成一个镜像的历史命令" class="headerlink" title="显示生成一个镜像的历史命令"></a>显示生成一个镜像的历史命令</h4><pre><code>docker history</code></pre><h4 id="为镜像起一个别名"><a href="#为镜像起一个别名" class="headerlink" title="为镜像起一个别名"></a>为镜像起一个别名</h4><pre><code>docker tag</code></pre><h3 id="镜像仓库-registry-操作"><a href="#镜像仓库-registry-操作" class="headerlink" title="镜像仓库(registry)操作"></a>镜像仓库(registry)操作</h3><h4 id="登录到一个registry"><a href="#登录到一个registry" class="headerlink" title="登录到一个registry"></a>登录到一个registry</h4><pre><code>docker login</code></pre><h4 id="从registry仓库搜索镜像"><a href="#从registry仓库搜索镜像" class="headerlink" title="从registry仓库搜索镜像"></a>从registry仓库搜索镜像</h4><pre><code>docker search</code></pre><h4 id="从仓库下载镜像到本地"><a href="#从仓库下载镜像到本地" class="headerlink" title="从仓库下载镜像到本地"></a>从仓库下载镜像到本地</h4><pre><code>docker pull</code></pre><h4 id="将一个镜像push到registry仓库中"><a href="#将一个镜像push到registry仓库中" class="headerlink" title="将一个镜像push到registry仓库中"></a>将一个镜像push到registry仓库中</h4><pre><code>docker push</code></pre><h4 id="获取Container-IP地址（Container状态必须是Up）"><a href="#获取Container-IP地址（Container状态必须是Up）" class="headerlink" title="获取Container IP地址（Container状态必须是Up）"></a>获取Container IP地址（Container状态必须是Up）</h4><pre><code>docker inspect id | grep IPAddress | cut -d &apos;&quot;&apos; -f 4</code></pre><h4 id="获取端口映射"><a href="#获取端口映射" class="headerlink" title="获取端口映射"></a>获取端口映射</h4><pre><code>docker inspect -f &apos;{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -&gt; {{(index $conf 0).HostPort}} {{end}}&apos; id</code></pre><h4 id="获取环境变量"><a href="#获取环境变量" class="headerlink" title="获取环境变量"></a>获取环境变量</h4><pre><code>docker exec container_id env</code></pre><h4 id="杀掉所有正在运行的容器"><a href="#杀掉所有正在运行的容器" class="headerlink" title="杀掉所有正在运行的容器"></a>杀掉所有正在运行的容器</h4><pre><code>docker kill $(docker ps -q)</code></pre><h4 id="删除老的-一周前创建-容器"><a href="#删除老的-一周前创建-容器" class="headerlink" title="删除老的(一周前创建)容器"></a>删除老的(一周前创建)容器</h4><pre><code>docker ps -a | grep &apos;weeks ago&apos; | awk &apos;{print $1}&apos; | xargs docker rm</code></pre><h4 id="删除已经停止的容器"><a href="#删除已经停止的容器" class="headerlink" title="删除已经停止的容器"></a>删除已经停止的容器</h4><pre><code>docker rm `docker ps -a -q`</code></pre><h4 id="删除所有镜像，小心"><a href="#删除所有镜像，小心" class="headerlink" title="删除所有镜像，小心"></a>删除所有镜像，小心</h4><pre><code>docker rmi $(docker images -q)</code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="Dockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。"><a href="#Dockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。" class="headerlink" title="Dockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。"></a>Dockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。</h4><p>不论是开发还是运维，学会编写Dockerfile几乎是必备的，这有助于你理解整个容器的运行。<br>    FROM , 从一个基础镜像构建新的镜像<br>    FROM ubuntu</p><pre><code>MAINTAINER , 维护者信息MAINTAINER WilliamENV , 设置环境变量ENV TEST 1RUN , 非交互式运行shell命令RUN apt-get -y updateRUN apt-get -y install nginxADD , 将外部文件拷贝到镜像里,src可以为urlADD http://nicescale.com/  /data/nicescale.tgzWORKDIR /path/to/workdir, 设置工作目录WORKDIR /var/wwwUSER , 设置用户IDUSER nginxVULUME &lt;#dir&gt;, 设置volumeVOLUME [‘/data’]EXPOSE , 暴露哪些端口EXPOSE 80 443ENTRYPOINT [‘executable’, ‘param1’,’param2’]执行命令ENTRYPOINT [&quot;/usr/sbin/nginx&quot;]CMD [“param1”,”param2”]CMD [&quot;start&quot;]</code></pre><p>docker创建、启动container时执行的命令，如果设置了ENTRYPOINT，则CMD将作为参数</p><h3 id="Dockerfile最佳实践"><a href="#Dockerfile最佳实践" class="headerlink" title="Dockerfile最佳实践"></a>Dockerfile最佳实践</h3><h4 id="尽量将一些常用不变的指令放到前面"><a href="#尽量将一些常用不变的指令放到前面" class="headerlink" title="尽量将一些常用不变的指令放到前面"></a>尽量将一些常用不变的指令放到前面</h4><p>CMD和ENTRYPOINT尽量使用json数组方式</p><h4 id="通过Dockerfile构建image"><a href="#通过Dockerfile构建image" class="headerlink" title="通过Dockerfile构建image"></a>通过Dockerfile构建image</h4><pre><code>docker build csphere/nginx:1.7 .</code></pre><h3 id="镜像仓库Registry"><a href="#镜像仓库Registry" class="headerlink" title="镜像仓库Registry"></a>镜像仓库Registry</h3><h4 id="镜像从Dockerfile-build生成后，需要将镜像推送-push-到镜像仓库。企业内部都需要构建一个私有docker-registry，这个registry可以看作二进制的scm，CI-CD也需要围绕registry进行。"><a href="#镜像从Dockerfile-build生成后，需要将镜像推送-push-到镜像仓库。企业内部都需要构建一个私有docker-registry，这个registry可以看作二进制的scm，CI-CD也需要围绕registry进行。" class="headerlink" title="镜像从Dockerfile build生成后，需要将镜像推送(push)到镜像仓库。企业内部都需要构建一个私有docker registry，这个registry可以看作二进制的scm，CI/CD也需要围绕registry进行。"></a>镜像从Dockerfile build生成后，需要将镜像推送(push)到镜像仓库。企业内部都需要构建一个私有docker registry，这个registry可以看作二进制的scm，CI/CD也需要围绕registry进行。</h4><h3 id="部署registry"><a href="#部署registry" class="headerlink" title="部署registry"></a>部署registry</h3><pre><code>mkdir /registrydocker run  -p 80:5000  -e STORAGE_PATH=/registry  -v /registry:/registry  registry:2.0</code></pre><h4 id="推送镜像保存到仓库"><a href="#推送镜像保存到仓库" class="headerlink" title="推送镜像保存到仓库"></a>推送镜像保存到仓库</h4><p>假设192.168.1.2是registry仓库的地址：<br>    docker tag  csphere/nginx:1.7 192.168.1.2/csphere/nginx:1.7<br>    docker push 192.168.1.2/csphere/nginx:1.7</p><h3 id="几个简单小例子"><a href="#几个简单小例子" class="headerlink" title="几个简单小例子"></a>几个简单小例子</h3><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="1-创建并拉取redis"><a href="#1-创建并拉取redis" class="headerlink" title="1.创建并拉取redis"></a>1.创建并拉取redis</h4><pre><code>docker pull redis:latest</code></pre><h4 id="2-创建测试容器"><a href="#2-创建测试容器" class="headerlink" title="2.创建测试容器"></a>2.创建测试容器</h4><pre><code>docker run -d --name xxx redis/test:0.1efc9bda4a2ff2f479b18e0fc4698e42c47c9583a24c93f5ce6b28a828a172709</code></pre><h4 id="3-登陆到xxx中"><a href="#3-登陆到xxx中" class="headerlink" title="3.登陆到xxx中"></a>3.登陆到xxx中</h4><pre><code>docker exec -it con03 /bin/bash[root@... /]# exit</code></pre>]]></content>
    
    <summary type="html">
    
      Docker常见命令
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Docker" scheme="https://www.kyralo.online/tagsP/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud学习笔记(六)</title>
    <link href="https://www.kyralo.online/2019/08/18/Springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>https://www.kyralo.online/2019/08/18/Springcloud学习笔记-六/</id>
    <published>2019-08-17T16:02:40.000Z</published>
    <updated>2020-03-18T05:33:33.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="六、zuul路由网关"><a href="#六、zuul路由网关" class="headerlink" title="六、zuul路由网关"></a>六、zuul路由网关</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>Zuul包含了对请求的==路由和过滤==的主要功能：</p><ul><li><p>路由功能</p><p>主要负责将外部请求转发到具体的微服务上，是实现外部访问入口的基础</p></li><li><p>过滤功能</p><p>负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础</p></li></ul><p>Zuul与Eureka进行整合，将==Zuul自身注册为Eureka==服务治理下的应用，同事从Eureka中获得其他微服务的信息，也即以后的微服务访问都是通过Zuul跳转后获得。</p><p>==三大功能—-==代理、路由、过滤</p><h2 id="2、路由基本配置"><a href="#2、路由基本配置" class="headerlink" title="2、路由基本配置"></a>2、路由基本配置</h2><ul><li><p>新建springcloud-study-zuul-gateway-9527模块</p></li><li><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-zuul-gateway-9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--zuul依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Hystrix容错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">springcloud-study-zuul-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">gateway-9572</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># 单机版配置defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka #设置与eureka server 交互的地址查询服务和注册服务都需要依赖的地址</span></span><br><span class="line">      <span class="comment">#集群配置</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="string">app.name:</span> <span class="string">springcloud-study-zuul-gateway</span></span><br><span class="line">  <span class="string">company.name:</span> <span class="string">www.gxs.com</span></span><br><span class="line">  <span class="string">build.artifactId:</span> <span class="string">$&#123;project.artifactId&#125;</span></span><br><span class="line">  <span class="string">build.version:</span> <span class="string">$&#123;project.version&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>host文件修改</p><p>127.0.0.1  myzuul.com</p></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulGatewayApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulGatewayApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><ul><li>不启用路由：<a href="http://localhost:8001/dept/findAll" target="_blank" rel="noopener">http://localhost:8001/dept/findAll</a></li><li>启用路由：<a href="http://myzuul.com:9527/STUDY-SPRINGCLOUD-DEPT/dept/findAll" target="_blank" rel="noopener">http://myzuul.com:9527/STUDY-SPRINGCLOUD-DEPT/dept/findAll</a></li></ul><h3 id="4、路由访问映射规则"><a href="#4、路由访问映射规则" class="headerlink" title="4、路由访问映射规则"></a>4、路由访问映射规则</h3><h4 id="1、代理名称"><a href="#1、代理名称" class="headerlink" title="1、代理名称"></a>1、代理名称</h4><ul><li><p>修改yml，增加如下配置</p><p>配置后<a href="http://myzuul.com:9527/STUDY-SPRINGCLOUD-DEPT/dept/findAll" target="_blank" rel="noopener">http://myzuul.com:9527/STUDY-SPRINGCLOUD-DEPT/dept/findAll</a></p><p>可变为<a href="http://myzuul.com:9527/mydept/dept/findAll" target="_blank" rel="noopener">http://myzuul.com:9527/mydept/dept/findAll</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">    <span class="string">mydept.serviceId:</span> <span class="string">STUDY-SPRINGCLOUD-DEPT</span></span><br><span class="line">    <span class="string">mydept.path:</span> <span class="string">/mydept/*</span></span><br></pre></td></tr></table></figure></li><li><p>原真实服务名忽略</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">    <span class="string">mydept.serviceId:</span> <span class="string">STUDY-SPRINGCLOUD-DEPT</span></span><br><span class="line">    <span class="string">mydept.path:</span> <span class="string">/mydept/*</span></span><br><span class="line">   <span class="comment">#多个用"*" ignored-services: "*"</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">STUDY-SPRINGCLOUD-DEPT</span></span><br></pre></td></tr></table></figure></li><li><p>设置统一公共前缀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">    <span class="string">mydept.serviceId:</span> <span class="string">STUDY-SPRINGCLOUD-DEPT</span></span><br><span class="line">    <span class="string">mydept.path:</span> <span class="string">/mydept/*</span></span><br><span class="line">  <span class="comment">#多个用"*" ignored-services: "*"</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">STUDY-SPRINGCLOUD-DEPT</span></span><br><span class="line">  <span class="comment">#公共前缀</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/springcloud</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="七、SpringCloud-Config-分布式配置中心"><a href="#七、SpringCloud-Config-分布式配置中心" class="headerlink" title="七、SpringCloud Config 分布式配置中心"></a>七、SpringCloud Config 分布式配置中心</h1><h2 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h2><p>分布式系统面临问题，配置问题</p><p>集中式的、动态的配置管理必不可少</p><p>  Spring colud Config为微服务架构中心的微服务提供==集中式的外部配置支持==，配置服务器==为各个不同的微服务应用==提供一个==中心化的外部配置==</p><p>Spring colud Config分为==服务端和客户端两部分==</p><ul><li><p>服务端</p><p>也成为分布式配置中心，他是一个独立的微服务应用，用来连接配置服务器并未客户端提供获取配置等访问接口</p></li><li><p>客户端</p><p>通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取配置，配置服务器默认采用git来存储配置信息。这样有助于对环境配置的版本管理，并且可以通过git客户端访问配置内容</p></li></ul><h3 id="2、功能"><a href="#2、功能" class="headerlink" title="2、功能"></a>2、功能</h3><ul><li><p>集中管理配置文件</p></li><li><p>不同环境不同配置，动态化的配置更新，分环境部署，dev/test/prod/beta/release</p></li><li><p>当配置发生变化是，服务不需要重启</p></li><li><p>运行期间动态调整配置</p></li><li><p>将配置信息以rest接口形式暴露</p></li><li><p>与github、svn整合</p><h2 id="2、SpringCloud-Config-服务端配置"><a href="#2、SpringCloud-Config-服务端配置" class="headerlink" title="2、SpringCloud Config 服务端配置"></a>2、SpringCloud Config 服务端配置</h2></li></ul><h3 id="1、在github上新建springcloud-study-config的repository"><a href="#1、在github上新建springcloud-study-config的repository" class="headerlink" title="1、在github上新建springcloud-study-config的repository"></a>1、在github上新建springcloud-study-config的repository</h3><p><a href="https://github.com/gongxings/springcloud-study-config.git" target="_blank" rel="noopener">https://github.com/gongxings/springcloud-study-config.git</a></p><h3 id="2、在本地硬盘中新建git仓库并clone"><a href="#2、在本地硬盘中新建git仓库并clone" class="headerlink" title="2、在本地硬盘中新建git仓库并clone"></a>2、在本地硬盘中新建git仓库并clone</h3><p>git clone <a href="https://github.com/gongxings/springcloud-study-config.git" target="_blank" rel="noopener">https://github.com/gongxings/springcloud-study-config.git</a></p><h3 id="3、在本地git仓库中新建一个application-yml"><a href="#3、在本地git仓库中新建一个application-yml" class="headerlink" title="3、在本地git仓库中新建一个application.yml"></a>3、在本地git仓库中新建一个application.yml</h3><p>格式必须是UTF-8的形式保存，否则会有乱码</p><p>提交到github</p><h3 id="4、新建module，springcloud-study-config-3344"><a href="#4、新建module，springcloud-study-config-3344" class="headerlink" title="4、新建module，springcloud-study-config-3344"></a>4、新建module，springcloud-study-config-3344</h3><ul><li><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-config-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--zuul依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Hystrix容错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">springcloud-study-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line">          <span class="comment"># uri: git@github.com:gongxings/springcloud-study-config.git</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/gongxings/springcloud-study-config.git</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-repo</span></span><br><span class="line"><span class="attr">          username:</span>   <span class="comment">#账号</span></span><br><span class="line"><span class="attr">          password:</span>   <span class="comment">#密码</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config3344App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Config3344App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改host文件增加映射</p><p>127.0.0.1  config3344.com</p></li><li><p>启动服务，访问yml</p><p><a href="http://config3344.com:3344/application-dev.yml" target="_blank" rel="noopener">http://config3344.com:3344/application-dev.yml</a></p><p><a href="http://config3344.com:3344/application/dev/master" target="_blank" rel="noopener">http://config3344.com:3344/application/dev/master</a></p></li></ul><h2 id="3、SpringCloud-Config-客户端配置与测试"><a href="#3、SpringCloud-Config-客户端配置与测试" class="headerlink" title="3、SpringCloud Config 客户端配置与测试"></a>3、SpringCloud Config 客户端配置与测试</h2><h3 id="1、在本地git仓库中新建一个springcolud-study-config-yml"><a href="#1、在本地git仓库中新建一个springcolud-study-config-yml" class="headerlink" title="1、在本地git仓库中新建一个springcolud-study-config.yml"></a>1、在本地git仓库中新建一个springcolud-study-config.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8202</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">test</span> <span class="comment">#开发环境</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">springcloud-study-config-client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="string">eureka7001.com:7001/eureka</span></span><br><span class="line"><span class="comment">#请保存为UTF-8格式</span></span><br></pre></td></tr></table></figure><h3 id="4、新建springcloud-study-config-client-3355模块"><a href="#4、新建springcloud-study-config-client-3355模块" class="headerlink" title="4、新建springcloud-study-config-client-3355模块"></a>4、新建springcloud-study-config-client-3355模块</h3><ul><li><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--zuul依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Hystrix容错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClient3355App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClient3355App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yml文件</p><p>application.yml是用户级的资源配置项</p><p>bootstrap.xml是系统级的，优先级更高</p><p>Springcolud 会创建一个BootStrap Context，作为spring应用的Application Context的父上下文。初始化的时候，BootStrap Context负责从外部资源加载配置属性并解析配置。这两个上下文共享一个外部获取的Environment。BootStrap 属性有高优先级，默认情况下，他们不会被本地配置覆盖。BootStrap Context和Application Context有着不同的约定。</p><p>所以新增一个bootstrap.xml，保证BootStrap Context和Application Context的配置分离。</p><ul><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">springcloud-study-config-client</span></span><br></pre></td></tr></table></figure></li><li><p>bootstrap.xml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   cloud:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">springcloud-study-config-client</span> <span class="comment">#需要从github上服务的资源名称，注意没有yml后缀</span></span><br><span class="line"><span class="attr">        profile:</span> <span class="string">dev</span>  <span class="comment">#本次访问的配置项</span></span><br><span class="line"><span class="attr">        label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://config3344.com:3344</span> <span class="comment">#本次服务启动后，先去找3344服务，通过SpringCloudConfig获取github上的配置</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>host文件配置</p><p>127.0.0.1  config-client.com</p></li><li><p>新建rest类，验证是否能从Github上读取配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientRest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;eureka.client.server-url.defaultZone&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String eurekaServers;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"applicationName:"</span>+<span class="keyword">this</span>.applicationName</span><br><span class="line">                +<span class="string">"eurekaServers:"</span>+<span class="keyword">this</span>.eurekaServers</span><br><span class="line">                +<span class="string">"port:"</span>+<span class="keyword">this</span>.port);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"applicationName:"</span>+<span class="keyword">this</span>.applicationName</span><br><span class="line">                +<span class="string">"eurekaServers:"</span>+<span class="keyword">this</span>.eurekaServers</span><br><span class="line">                +<span class="string">"port:"</span>+<span class="keyword">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>启动3344、3355</p></li></ul><h2 id="4、配置实战"><a href="#4、配置实战" class="headerlink" title="4、配置实战"></a>4、配置实战</h2><p>config服务端配置测试OK，我们可以和config+github进行配置修改并获得内容</p><p>做一个wureka服务+一个dept访问的微服务，将两个微服务的配置统一由github获得实现统一配置，分布式管理，完成多环境变更。</p>]]></content>
    
    <summary type="html">
    
      Springcloud学习笔记
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Springcloud" scheme="https://www.kyralo.online/tagsP/Springcloud/"/>
    
      <category term="微服务" scheme="https://www.kyralo.online/tagsP/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud学习笔记(五)</title>
    <link href="https://www.kyralo.online/2019/08/18/Springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>https://www.kyralo.online/2019/08/18/Springcloud学习笔记-五/</id>
    <published>2019-08-17T16:00:11.000Z</published>
    <updated>2020-03-18T05:33:21.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="四、Feign负载均衡"><a href="#四、Feign负载均衡" class="headerlink" title="四、Feign负载均衡"></a>四、Feign负载均衡</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>官网地址：<a href="http://cloud.spring.io/spring-cloud-openfeign/single/spring-cloud-openfeign.html" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-openfeign/single/spring-cloud-openfeign.html</a></p><p>是一个声明式Webservice客户端，，使得编写web服务客户端变得非常容易</p><p>==只需要创建一个接口，然后再上面添加注解即可==</p><p>面向接口编程，比如webservice接口</p><ul><li><p>微服务名称获得调用地址</p></li><li><p>通过接口+注解，获得调用服务</p><p>统一面向接口的编程套路—feign</p><p>前面再使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成一套模板化的调用方法，但是在实际的开发中，由于对服务依赖的调用可能不止一处，==往往一个接会被多处调用，所以通常会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用==。所以，Feign在此基础上做了一些封装，由他来帮助我么定义和实现依赖服务接口的定义。在Feign的实现下，==我们只需要创建一个接口并使用注解的方式来配置它==（以前是Dao接口上面标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可），即可完成对位服务提供方便的接口绑定，简化了使用Spring Cloud Ribbon时，自动封装服务调用客户端的开发量。</p></li></ul><h2 id="2、Feign的使用步骤"><a href="#2、Feign的使用步骤" class="headerlink" title="2、Feign的使用步骤"></a>2、Feign的使用步骤</h2><p>参考springcloud-study-consumer-dept-80模块，新建springcloud-study-consumer-dept-feign模块</p><ul><li><p>修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--增加Feign的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改主启动类</p></li><li><p>修改springcloud-study-api</p><ul><li><p>pom文件修改</p><p>添加Feign支持依赖，与springcloud-study-consumer-dept-feign一致</p></li><li><p>新建DeptClientService接口类，并增加注解@FeignClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"STUDY-SPRINGCLOUD-DEPT"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/add"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">( DeptEntity deptEntity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/findById/&#123;deptNo&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptEntity <span class="title">findById</span><span class="params">(Long deptNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/findAll"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在springcloud-study-consumer-dept-feign修改Controller，修改基于上述配置的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptClientService deptClientService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer/dept/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">( DeptEntity deptEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">//三个参数：url,requestMap ResponseBean.class</span></span><br><span class="line">        <span class="keyword">return</span>  deptClientService.add(deptEntity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/dept/findById/&#123;deptNo&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptEntity <span class="title">findById</span><span class="params">(Long deptNo)</span></span>&#123;</span><br><span class="line">        <span class="comment">//三个参数：url,requestMap ResponseBean.class</span></span><br><span class="line">        <span class="keyword">return</span> deptClientService.findById(deptNo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/dept/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//三个参数：url,requestMap ResponseBean.class</span></span><br><span class="line">        <span class="keyword">return</span>  deptClientService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改Feign模块主启动类，增加@EnableFeignClients注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在启动该微服务式是能去加载我们定义的Feign配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = <span class="string">"com.gxs.springcloud"</span>)</span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.gxs.springcloud"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerFeignApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumerFeignApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Feign集成了Ribbon"><a href="#3、Feign集成了Ribbon" class="headerlink" title="3、Feign集成了Ribbon"></a>3、Feign集成了Ribbon</h2><p>利用Ribbon维护了STUDY-SPRINGCLOUD-DEPT的服务列表，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，==通过Feign只需要定义服务绑定接口且以声明式的方法==，优雅的而简单的实现了服务调用。</p><h2 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h2><p>Feign通过接口的方法调用Rest服务（之前是Ribbon+RestTemplate）</p><p>该请求发送给Eureka服务器（<a href="http://STUDY-SPRINGCLOUD-DEPT/depe/findAll）通过Feign直接找到服务接口，由于再进行服务调用时候融合了Ribbon技术，所以也支持负载均衡" target="_blank" rel="noopener">http://STUDY-SPRINGCLOUD-DEPT/depe/findAll）通过Feign直接找到服务接口，由于再进行服务调用时候融合了Ribbon技术，所以也支持负载均衡</a></p><h1 id="五、Hystrix-断路器"><a href="#五、Hystrix-断路器" class="headerlink" title="五、Hystrix 断路器"></a>五、Hystrix 断路器</h1><h2 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h2><h4 id="分布式面临的问题"><a href="#分布式面临的问题" class="headerlink" title="分布式面临的问题"></a>分布式面临的问题</h4><p>复杂分布式体系结构复杂的依赖关系，不可避免的存在服务宕机，网络中断的问题</p><ul><li><p>服务雪崩</p><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的服务，这就是所谓的==扇出==。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的==雪崩效应==。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源的紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p></li></ul><h4 id="Hystrix介绍"><a href="#Hystrix介绍" class="headerlink" title="Hystrix介绍"></a>Hystrix介绍</h4><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，==不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性==。</p><p>“断路器”本身是一种开关设置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），==向调用方返回一个符合预期的，可处理的备选响应（FallBack），而不是长时间的等待或者抛出服务方无法处理的异常==，这样就保证服务方调用线程不会被长时间、不必要的占用，从而避免故障再分布式系统中的绵延，乃至雪崩。</p><ul><li><p>功能</p><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近试试的监控</li><li>。。。。。</li></ul></li><li><p>官网资料：<a href="https://github.com/Netflix/Hystrix/wiki" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki</a></p></li></ul><h2 id="2、服务熔断"><a href="#2、服务熔断" class="headerlink" title="2、服务熔断"></a>2、服务熔断</h2><p>应对雪崩效应的一种微服务链路保护机制，快速返回错误的响应信息。</p><p>熔断机制的注解：@HystrixCommand</p><h3 id="1、参考springcloud-study-provider-dept-8001新建，springcloud-study-provider-dept-hystrix-8001模块"><a href="#1、参考springcloud-study-provider-dept-8001新建，springcloud-study-provider-dept-hystrix-8001模块" class="headerlink" title="1、参考springcloud-study-provider-dept-8001新建，springcloud-study-provider-dept-hystrix-8001模块"></a>1、参考springcloud-study-provider-dept-8001新建，springcloud-study-provider-dept-hystrix-8001模块</h3><ul><li>pom文件新增</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>yml文件修改实例id</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务实例名称修改</span></span><br><span class="line"><span class="attr">instance-id:</span> <span class="string">study-springcloud-dept8001-hystrix</span></span><br></pre></td></tr></table></figure></li><li><p>修改DeptController</p><p>用HystrixCommand报异常后如何处理</p><p>一旦服务调用失败并抛出错误信息后，会自动调用@HystrixCommand标注好的fallBackMethod调用类中知道的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/findById/&#123;deptNo&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DeptEntity <span class="title">findById</span><span class="params">(Long deptNo)</span> </span>&#123;</span><br><span class="line">    DeptEntity deptEntity = deptService.findById(deptNo);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> ==deptEntity)&#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"该deptNo没有对应的信息"</span>+deptNo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  deptEntity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> DeptEntity <span class="title">processHystrixGet</span><span class="params">(Long deptNo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> DeptEntity().setDeptNo(deptNo)</span><br><span class="line">                .setDeptName(<span class="string">"该deptNo没有对应的信息"</span>)</span><br><span class="line">                .setDbSource(<span class="string">"没有这个数据库"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在主启动类上添加==@EnableCircuitBreaker==</p></li></ul><h2 id="3、服务降级"><a href="#3、服务降级" class="headerlink" title="3、服务降级"></a>3、服务降级</h2><p>整体资源不够了，忍痛将某些服务先关掉，待度过难关后再开启。</p><p>资源的抢占和分配</p><p>所谓降级，一般是从整体负荷考虑，当某个服务熔断后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值，这样做，虽然服务水平下降，好歹能用，比直接改掉要强。</p><p>==服务降级是在客户端（消费者）处理完成的，与服务端没关系==</p><h3 id="1、修改springcloud-study-api模块"><a href="#1、修改springcloud-study-api模块" class="headerlink" title="1、修改springcloud-study-api模块"></a>1、修改springcloud-study-api模块</h3><ul><li>根据已有的com.gxs.springcloud.service.DeptClientService接口，新建一个实现FallBackFactory接口的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component 不要忘记添加</span></span><br><span class="line"><span class="comment">//主业务与熔断方法解耦</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallBackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">DeptClientService</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptClientService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptClientService() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(DeptEntity deptEntity)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> DeptEntity <span class="title">findById</span><span class="params">(Long deptNo)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> DeptEntity().setDeptNo(deptNo)</span><br><span class="line">                        .setDeptName(<span class="string">"该deptNo没有对应的信息，Consumer客户端提供的降级信息，此刻服务provider已经关闭"</span>)</span><br><span class="line">                        .setDbSource(<span class="string">"没有这个数据库"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在DeptClientService中的FeignClient注解中添加FallBackfactory属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"STUDY-SPRINGCLOUD-DEPT"</span>,fallbackFactory = DeptClientServiceFallBackFactory.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br></pre></td></tr></table></figure></li><li><p>springcloud-study-consumer-dept-feign修改yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="string">ture;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、HystrixDashboard"><a href="#4、HystrixDashboard" class="headerlink" title="4、HystrixDashboard"></a>4、HystrixDashboard</h2><h3 id="1、概述-2"><a href="#1、概述-2" class="headerlink" title="1、概述"></a>1、概述</h3><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard),Hystrix会持续的记录所有通过Hystrix发起的请求的执行信息，并统计报表和图形的形式展示给用户，包括每秒执行多少次清酒，多少成功，多少失败等。Netflix通过Hystrix-metrics-event-stream项目实现了对以上指标的监控。spring cloud 也提供了对Hystrix Dashboard的整合，对监控内容转化成可视化的界面。</p><h3 id="2、构建步骤"><a href="#2、构建步骤" class="headerlink" title="2、构建步骤"></a>2、构建步骤</h3><ul><li><p>构建模块项目springcloud-study-consumer-hystrix-dashboard</p></li><li><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-consumer-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Ribbon相关引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--增加Feign的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--hystrix-dashboard依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>所有provider微服务提供类（8001、8002、8002）都需要监控依赖配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动,访问地址<a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a></p></li></ul><h3 id="填写监控"><a href="#填写监控" class="headerlink" title="填写监控"></a>填写监控</h3>]]></content>
    
    <summary type="html">
    
      Springcloud学习笔记
    
    </summary>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Springcloud" scheme="https://www.kyralo.online/tagsP/Springcloud/"/>
    
      <category term="微服务" scheme="https://www.kyralo.online/tagsP/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud学习笔记(四)</title>
    <link href="https://www.kyralo.online/2019/08/17/Springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>https://www.kyralo.online/2019/08/17/Springcloud学习笔记-四/</id>
    <published>2019-08-17T15:56:47.000Z</published>
    <updated>2020-03-18T05:33:35.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三、Ribbon负载均衡"><a href="#三、Ribbon负载均衡" class="headerlink" title="三、Ribbon负载均衡"></a>三、Ribbon负载均衡</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>基于Netflix ribbon实现的一套 ==客户端、负载均衡的工具==</p><p>重要功能是提供==客户端的软件负载均衡算法==，Ribbon客户端组件提供一系列的配置项如链接超时、重试等</p><p>官网资料：github：Netfix/Ribbon</p><p>常见的负载均衡：软件Nginx、LVS 硬件F5</p><h2 id="2、Ribbon初步配置"><a href="#2、Ribbon初步配置" class="headerlink" title="2、Ribbon初步配置"></a>2、Ribbon初步配置</h2><h3 id="1、修改consumer-80的配置"><a href="#1、修改consumer-80的配置" class="headerlink" title="1、修改consumer-80的配置"></a>1、修改consumer-80的配置</h3><ul><li><p>修改pom配置，增加相关引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon相关引用，与eureka有关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改application.yml ,追加Eureka的注册服务地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="string">eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类中增加注解@EnableEurekaClient，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer80App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ConfigBean配置中增加@LoadBalance注解，开启客户端负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置RestTemplate</span></span><br><span class="line"><span class="comment">     * 通过RestTemplate调用提供者服务 ，发送rest请求</span></span><br><span class="line"><span class="comment">     * 提供了多种访问http服务的方法，</span></span><br><span class="line"><span class="comment">     * 针对于访问rest服务&lt;strong&gt;客户端&lt;/strong&gt;的调用的模板类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//ribbon实现的一套 ==客户端、负载均衡的工具</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改客户端访问类80的controller，将地址改为微服务名称<strong>STUDY-SPRINGCLOUD-DEPT</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册再EurekaServer中的微服务名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX=<span class="string">"http://STUDY-SPRINGCLOUD-DEPT"</span>;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><p>先启动Eureka集群，然后启动8001服务注册进eureka，再启动80客户端</p></li></ul><h2 id="3、Ribbon负载均衡"><a href="#3、Ribbon负载均衡" class="headerlink" title="3、Ribbon负载均衡"></a>3、Ribbon负载均衡</h2><h3 id="1、架构说明"><a href="#1、架构说明" class="headerlink" title="1、架构说明"></a>1、架构说明</h3><h3 id="2、新建8002、8003服务提供者"><a href="#2、新建8002、8003服务提供者" class="headerlink" title="2、新建8002、8003服务提供者"></a>2、新建8002、8003服务提供者</h3><p>复制8001的配置和类</p><p>yml配置中的实例名称application name不能改</p><h3 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h3><p>Ribbon其实就是一个软辅在均衡的客户端组件，他和其他所有需要请求的客户端结合使用，和Eureka结合只是其中的一个实例。默认采用轮询算法。</p><h2 id="4、Ribbon核心组件IRule"><a href="#4、Ribbon核心组件IRule" class="headerlink" title="4、Ribbon核心组件IRule"></a>4、Ribbon核心组件IRule</h2><p>IRule：根据特定算法中从服务列表中选取一个要访问的服务</p><h4 id="Ribbon采用的负载均衡算法："><a href="#Ribbon采用的负载均衡算法：" class="headerlink" title="Ribbon采用的负载均衡算法："></a>Ribbon采用的负载均衡算法：</h4><ul><li><p>com.netflix.loadbalancer.RoundRobinRule</p><p>轮询：默认</p></li><li><p>com.netflix.loadbalancer.RandomRule</p><p>随机</p></li><li><p>com.netflix.loadbalancer.AvailabilityFilteringRule</p><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务、还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问</p></li><li><p>com.netflix.loadbalancer.WeightedResponseTimeRule</p><p>根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大，选中的概率越高。刚启动时如果统计信息不足，则上有RoundRobinRule策略，等统计信息足够，会切换到WeightedResponseTimeRule</p></li><li><p>com.netflix.loadbalancer.RetryRule</p><p>先按RoundRobinRule轮询算法获取服务，如果失败则在指定时间内进行重试</p></li><li><p>com.netflix.loadbalancer.BestAvailableRule</p><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</p></li><li><p>com.netflix.loadbalancer.ZoneAvoidanceRule</p><p>默认规则，复合判断Server所在区域的性能和Server的可用性选择服务</p></li></ul><h4 id="配置负载均衡算法"><a href="#配置负载均衡算法" class="headerlink" title="配置负载均衡算法"></a>配置负载均衡算法</h4><p>在ConfigBean中显示声明算法,增加bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//用我们选择的随机算法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、Ribbon自定义"><a href="#5、Ribbon自定义" class="headerlink" title="5、Ribbon自定义"></a>5、Ribbon自定义</h2><h3 id="1、主启动类上添加注解-RibbonClient"><a href="#1、主启动类上添加注解-RibbonClient" class="headerlink" title="1、主启动类上添加注解@RibbonClient"></a>1、主启动类上添加注解@RibbonClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在启动该微服务式是能去加载我们定义的Ribbon配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name=<span class="string">"STUDY-SPRINGCLOUD-DEPT"</span>,configuration = MySelfRule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer80App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、配置注意细节"><a href="#2、配置注意细节" class="headerlink" title="2、配置注意细节"></a>2、配置注意细节</h3><ul><li>自定义配置类不能放在@ComponentScan所扫描的当前包以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端锁共享，达不到特殊定制化的目的</li></ul><h3 id="3、自定义规则深度解析"><a href="#3、自定义规则深度解析" class="headerlink" title="3、自定义规则深度解析"></a>3、自定义规则深度解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">继承AbstractLoadBalancerRule</span></span><br><span class="line"><span class="comment">实现</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRandomRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Springcloud学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Springcloud" scheme="https://www.kyralo.online/tagsP/Springcloud/"/>
    
      <category term="微服务" scheme="https://www.kyralo.online/tagsP/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud学习笔记(三)</title>
    <link href="https://www.kyralo.online/2019/08/17/Springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>https://www.kyralo.online/2019/08/17/Springcloud学习笔记-三/</id>
    <published>2019-08-17T15:53:58.000Z</published>
    <updated>2020-03-18T05:33:16.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="5、Eureka集群配置"><a href="#5、Eureka集群配置" class="headerlink" title="5、Eureka集群配置"></a>5、Eureka集群配置</h2><h3 id="1、新建7002、7003Eureka服务项目复制7001的pom、yml文件"><a href="#1、新建7002、7003Eureka服务项目复制7001的pom、yml文件" class="headerlink" title="1、新建7002、7003Eureka服务项目复制7001的pom、yml文件"></a>1、新建7002、7003Eureka服务项目复制7001的pom、yml文件</h3><h3 id="2、修改域名映射，修改host文件"><a href="#2、修改域名映射，修改host文件" class="headerlink" title="2、修改域名映射，修改host文件"></a>2、修改域名映射，修改host文件</h3><p>==必须修改，否则不成功==</p><p><img src="https://view.moezx.cc/images/2019/08/17/hosts.png" alt></p><h3 id="3、台Eureka的yml配置"><a href="#3、台Eureka的yml配置" class="headerlink" title="3、台Eureka的yml配置"></a>3、台Eureka的yml配置</h3><p><img src="https://view.moezx.cc/images/2019/08/17/eurekac41f1da281617be0.png" alt></p><p>修改7001、7002、7003对应的yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="comment"># 单机版配置defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka #设置与eureka server 交互的地址查询服务和注册服务都需要依赖的地址</span></span><br><span class="line">  <span class="comment">#集群配置</span></span><br><span class="line"><span class="attr">  defaultZone:</span> <span class="attr">http://localhost:7001/eureka,http://localhost:7002/eureka</span></span><br></pre></td></tr></table></figure><h3 id="4、在8001配置注册"><a href="#4、在8001配置注册" class="headerlink" title="4、在8001配置注册"></a>4、在8001配置注册</h3><p>修改yml中集群的配置，使8001同时注册进7001-3集群环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka,http://localhost:7002/eureka,http://localhost:7003/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://view.moezx.cc/images/2019/08/17/eureka.png" alt></p><p><strong>至此有三个eureka集群，一个微服务提供者</strong></p><h3 id="5、Eureka与Zookeeper的区别"><a href="#5、Eureka与Zookeeper的区别" class="headerlink" title="5、Eureka与Zookeeper的区别"></a>5、Eureka与Zookeeper的区别</h3><ul><li><p>CAP理论</p><ul><li><p>C：consistency 强一致性</p></li><li><p>A：Availability 可用性 （HA高可用）</p></li><li><p>P：Partition tolerance 分区容错性</p><p><img src="https://view.moezx.cc/images/2019/08/17/CAP.png" alt></p></li></ul></li><li><p>Eureka遵循AP原则</p><p>弱一致性</p><p>各个节点平等，不存在主存，只要有一台就能保证服务可用，但是可能不是最新的</p><p>网络稳定，当前新注册的服务才会同步到其他节点</p></li><li><p>Zookeeper遵循CP理论</p><p>问题：当master节点由于网络故障，与其他节点失去联系，剩余节点重新进行leader选举。问题在于，选举leader的时间太长，且选举期间zk集群不可用，导致注册服务瘫痪。</p></li></ul>]]></content>
    
    <summary type="html">
    
      Springcloud学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Springcloud" scheme="https://www.kyralo.online/tagsP/Springcloud/"/>
    
      <category term="微服务" scheme="https://www.kyralo.online/tagsP/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud学习笔记(二)</title>
    <link href="https://www.kyralo.online/2019/08/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>https://www.kyralo.online/2019/08/17/SpringCloud学习笔记-二/</id>
    <published>2019-08-17T15:31:08.000Z</published>
    <updated>2020-03-18T05:33:19.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二、Eureka配置"><a href="#二、Eureka配置" class="headerlink" title="二、Eureka配置"></a>二、Eureka配置</h1><p><img src="https://view.moezx.cc/images/2019/08/17/eureka0a8e2135703e1673.png" alt="eureka注册中心"></p><ul><li>新建springcloud-study-euraka-7001工程，导入相关依赖</li></ul><p>pom文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-euraka-7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server 服务端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml文件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false 表示自己就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment">#设置与eureka server 交互的地址查询服务和注册服务都需要依赖的地址</span></span><br></pre></td></tr></table></figure><h2 id="1、将服务注册进Eureka"><a href="#1、将服务注册进Eureka" class="headerlink" title="1、将服务注册进Eureka"></a>1、将服务注册进Eureka</h2><ul><li>8001provider服务中添加配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将微服务provider注册进eureka--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改8001的yml配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#客户端注册进eureka服务列表</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><ul><li>8001 启动类增加@EnableEurekaClient注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider8001App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider8001App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册成功，在7001的Eureka服务站中会显示</li></ul><p><img src="https://view.moezx.cc/images/2019/08/17/eureka83d1b8ec7553bc47.png" alt></p><h2 id="2、actuator与注册微服务信息完善"><a href="#2、actuator与注册微服务信息完善" class="headerlink" title="2、actuator与注册微服务信息完善"></a>2、actuator与注册微服务信息完善</h2><p><strong>actuator：在springboot中主管监控和配置</strong></p><ul><li><p>主机名称、服务名称修改</p><p>1、修改8001的yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br><span class="line">   <span class="comment">#服务实例名称修改</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">study-springcloud-dept8001</span></span><br></pre></td></tr></table></figure></li><li><p>访问信息有ip信息提示</p><p>修改8001yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#客户端注册进eureka服务列表</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment">#服务实例名称修改</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">study-springcloud-dept8001</span></span><br><span class="line">    <span class="comment">#访问路径显示IP地址</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>微服务info内容详细信息</p><p>1、修改8001的pom文件，增加actuator的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--actuator监控自信息完善--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、父工程pom文件修改，增加build信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--finalName 父工程名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--过滤开启--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--增加插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置插件解析--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">delimit</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimit</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、修改8001的yml，增加info信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="string">app.name:</span> <span class="string">study-springcloud-micoservices</span></span><br><span class="line">  <span class="string">company.name:</span> <span class="string">www.gxs.com</span></span><br><span class="line">  <span class="string">build.artifactId:</span> <span class="string">$project.artifactId$</span></span><br><span class="line">  <span class="string">build.version:</span> <span class="string">$project.version$</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3、Eureka自我保护机制"><a href="#3、Eureka自我保护机制" class="headerlink" title="3、Eureka自我保护机制"></a>3、Eureka自我保护机制</h2><p><img src="https://view.moezx.cc/images/2019/08/17/eureka56193755d4a5621b.png" alt></p><ul><li><p>Netflix在设置Eureka时，遵循AP原则</p></li><li><p>某时刻某一微服务不可用时，eureka不会立刻清理，依旧会对改微服务的信息进行保存。服务失去心跳、名称变更、网络拥堵</p></li><li><p><strong>自我保护机制：</strong>应对网络异常的安全措施</p><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销实例（默认90秒）。但是当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险——因为微服务本身其实是健康的，==此时本不应该注销这个服务==。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点再短时间内丢失过多客户端时（可能发生网络故障），那么这个节点就会进入自我保护模式。一旦进去该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也即不会注销任何微服务）。当网络故障恢复后，改EurekaServer节点会自动退出自我保护模式。</p><p>==宁可保护错误的注册信息，也不盲目注销任何可能健康的微服务实例==</p><h4 id="禁用自我保护机制"><a href="#禁用自我保护机制" class="headerlink" title="禁用自我保护机制"></a>禁用自我保护机制</h4><p>可以使用eureka.server.enable-self-preservation=false</p></li></ul><h2 id="4、Eureka服务发现"><a href="#4、Eureka服务发现" class="headerlink" title="4、Eureka服务发现"></a>4、Eureka服务发现</h2><p>   对于注册进eureka里面的服务，可以通过服务发现获得该服务的信息</p><p>  ==供消费者调用==</p><h5 id="1、添加服务发现接口"><a href="#1、添加服务发现接口" class="headerlink" title="1、添加服务发现接口"></a>1、添加服务发现接口</h5><p>  在8001工程的Controller类中增加DiscoveryClient</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br></pre></td></tr></table></figure><h5 id="2、增加自己服务描述的接口"><a href="#2、增加自己服务描述的接口" class="headerlink" title="2、增加自己服务描述的接口"></a>2、增加自己服务描述的接口</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/discovery"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = discoveryClient.getServices();</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"STUDY-SPRINGCLOUD-DEPT"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance element :instances)&#123;</span><br><span class="line">        System.out.println(element.getServiceId());</span><br><span class="line">        System.out.println(element.getHost());</span><br><span class="line">        System.out.println(element.getPort());</span><br><span class="line">        System.out.println(element.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、8001主启动类中增加-EnableDiscoveryClient注解"><a href="#3、8001主启动类中增加-EnableDiscoveryClient注解" class="headerlink" title="3、8001主启动类中增加 @@EnableDiscoveryClient注解"></a>3、8001主启动类中增加 @@EnableDiscoveryClient注解</h5><h5 id="4、启动，调用http-localhost-8001-dept-discovery"><a href="#4、启动，调用http-localhost-8001-dept-discovery" class="headerlink" title="4、启动，调用http://localhost:8001/dept/discovery"></a>4、启动，调用<a href="http://localhost:8001/dept/discovery" target="_blank" rel="noopener">http://localhost:8001/dept/discovery</a></h5><p>  8001需要等待注入一段时间，注入进server</p><h5 id="5、在80消费端中增加相应调用"><a href="#5、在80消费端中增加相应调用" class="headerlink" title="5、在80消费端中增加相应调用"></a>5、在80消费端中增加相应调用</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer/dept/discovery"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  restTemplate.getForObject(</span><br><span class="line">            REST_URL_PREFIX+<span class="string">"/dept/discovery"</span>,</span><br><span class="line">            Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Springcloud学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Springcloud" scheme="https://www.kyralo.online/tagsP/Springcloud/"/>
    
      <category term="微服务" scheme="https://www.kyralo.online/tagsP/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud学习笔记(一)</title>
    <link href="https://www.kyralo.online/2019/08/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>https://www.kyralo.online/2019/08/17/SpringCloud学习笔记-一/</id>
    <published>2019-08-17T15:21:08.000Z</published>
    <updated>2020-03-18T05:33:14.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、工程环境搭建"><a href="#一、工程环境搭建" class="headerlink" title="一、工程环境搭建"></a>一、工程环境搭建</h2><p>spring cloud版本：Dalston.SR1</p><p>spring boot版本：1.5.19.RELEASE</p><h3 id="1、父工程搭建"><a href="#1、父工程搭建" class="headerlink" title="1、父工程搭建"></a>1、父工程搭建</h3><ul><li><p>新建springcloud-study 父工程</p><p>pom文件</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>1.5.19.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql-connector.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-starter.version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">mybatis-starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-、构建公共子模块-springcloud-study-api"><a href="#2-、构建公共子模块-springcloud-study-api" class="headerlink" title="2 、构建公共子模块 springcloud-study-api"></a>2 、构建公共子模块 springcloud-study-api</h3><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、构建服务提供者-springcloud-study-provider-dept-8001"><a href="#3、构建服务提供者-springcloud-study-provider-dept-8001" class="headerlink" title="3、构建服务提供者 springcloud-study-provider-dept-8001"></a>3、构建服务提供者 springcloud-study-provider-dept-8001</h3><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-provider-dept-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml文件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置服务器信息</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line">  <span class="comment">#context-path: /study 配置根目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库信息配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">study-springcloud-dept</span>  <span class="comment">#应用名称</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/study?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;verifyServerCertificate=false&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#druid连接池配置</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    userGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.gxs.springcloud.entities</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#开启驼峰命名</span></span><br><span class="line"><span class="attr">    cache-enabled:</span> <span class="literal">true</span> <span class="comment">#开启二级缓存</span></span><br></pre></td></tr></table></figure><h3 id="4、构建服务消费者-springcloud-study-consumer-dept-80"><a href="#4、构建服务消费者-springcloud-study-consumer-dept-80" class="headerlink" title="4、构建服务消费者 springcloud-study-consumer-dept-80"></a>4、构建服务消费者 springcloud-study-consumer-dept-80</h3><p>pom文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-consumer-dept-80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gxs.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-study-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署 修改后立即生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer80App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Springcloud学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.kyralo.online/tagsP/Java/"/>
    
      <category term="Springcloud" scheme="https://www.kyralo.online/tagsP/Springcloud/"/>
    
      <category term="微服务" scheme="https://www.kyralo.online/tagsP/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署安装MongoDB</title>
    <link href="https://www.kyralo.online/2019/08/14/Docker%E5%AE%89%E8%A3%85Mongodb/"/>
    <id>https://www.kyralo.online/2019/08/14/Docker安装Mongodb/</id>
    <published>2019-08-14T03:20:56.000Z</published>
    <updated>2020-03-18T05:32:34.842Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><pre><code>docker pull registry.docker-cn.com/library/mongo</code></pre><h3 id="创建本地数据文件夹"><a href="#创建本地数据文件夹" class="headerlink" title="创建本地数据文件夹"></a>创建本地数据文件夹</h3><pre><code>mkdir /data/mongodb0</code></pre><h3 id="启动MongoDB容器"><a href="#启动MongoDB容器" class="headerlink" title="启动MongoDB容器"></a>启动MongoDB容器</h3><pre><code>docker run --name mongodb-server0 -v /data/mongodb0:/data/db -p 27017:27017 -d 镜像ID(镜像名 mongo) --auth</code></pre><ul><li>-v后面的参数表示把数据文件挂载到宿主机的路径</li><li>-p把mongo端口映射到宿主机的指定端口</li><li>–auth表示连接mongodb需要授权</li></ul><h3 id="为MongoDB添加管理员用户"><a href="#为MongoDB添加管理员用户" class="headerlink" title="为MongoDB添加管理员用户"></a>为MongoDB添加管理员用户</h3><h4 id="进入MongoDB控制台"><a href="#进入MongoDB控制台" class="headerlink" title="进入MongoDB控制台"></a>进入MongoDB控制台</h4><pre><code>docker exec -it some-mongo mongo admin</code></pre><h4 id="添加用户命令"><a href="#添加用户命令" class="headerlink" title="添加用户命令"></a>添加用户命令</h4><pre><code>db.createUser({ user: &apos;1iURI&apos;, pwd: &apos;rootroot&apos;, roles: [ { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; } ] });</code></pre><h4 id="MongoDB用户权限"><a href="#MongoDB用户权限" class="headerlink" title="MongoDB用户权限"></a>MongoDB用户权限</h4><h5 id="内建的角色"><a href="#内建的角色" class="headerlink" title="内建的角色"></a>内建的角色</h5><ul><li>数据库用户角色：read、readWrite;</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin；</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li><li>备份恢复角色：backup、restore；</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li></ul><h5 id="内部角色：-system"><a href="#内部角色：-system" class="headerlink" title="内部角色：__system"></a>内部角色：__system</h5><p>角色说明：</p><ul><li>Read：允许用户读取指定数据库</li><li>readWrite：允许用户读写指定数据库</li><li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li><li>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</li><li>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</li><li>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</li><li>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</li><li>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</li><li>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</li><li>root：只在admin数据库中可用。超级账号，超级权限</li></ul><h3 id="副本集形式部署"><a href="#副本集形式部署" class="headerlink" title="副本集形式部署"></a>副本集形式部署</h3><p>如果你想单点连接，那么从这里往下不需要看了，如果你想搭建MongoDB副本集，那么请移除MongoDB的所有docker容器，重新按照下面的方式启动容器和设置</p><ol start="0"><li>创建用于auth的keyfile<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    mkdir -p /data/mongodb0_conf</span><br><span class="line">    cd /data/mongodb0_conf</span><br><span class="line">    openssl rand -base64 741 &gt; mongodb-keyfile</span><br><span class="line">    chmod 600 mongodb-keyfile</span><br><span class="line">    chown 999 mongodb_keyfile</span><br><span class="line"></span><br><span class="line">1. 启动三个mongodb进程</span><br><span class="line">    docker run --name mongodb-server0 \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /data/mongodb0:/data/db \</span><br><span class="line">    -v /data/mongodb0_conf:/opt/keyfile \</span><br><span class="line">    -p 27017:27017 \</span><br><span class="line">    -d d22 \</span><br><span class="line">    --smallfiles \</span><br><span class="line">    --keyFile /opt/keyfile/mongodb-keyfile \</span><br><span class="line">    --replSet exuehui-mongo-set</span><br><span class="line"></span><br><span class="line">    docker run --name mongodb-server1 \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /data/mongodb1:/data/db \</span><br><span class="line">    -v /data/mongodb1_conf:/opt/keyfile \</span><br><span class="line">    -p 27018:27017 \</span><br><span class="line">    -d d22 \</span><br><span class="line">    --smallfiles \</span><br><span class="line">    --keyFile /opt/keyfile/mongodb-keyfile \</span><br><span class="line">    --replSet exuehui-mongo-set</span><br><span class="line"></span><br><span class="line">    docker run --name mongodb-server0 \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /data/mongodb0:/data/db \</span><br><span class="line">    -v /data/mongodb0_conf:/opt/keyfile \</span><br><span class="line">    -p 37017:27017 \</span><br><span class="line">    -d d22 \</span><br><span class="line">    --smallfiles \</span><br><span class="line">    --keyFile /opt/keyfile/mongodb-keyfile \</span><br><span class="line">    --replSet exuehui-mongo-set</span><br></pre></td></tr></table></figure></li></ol><p>2 进入 mongodb docker<br>    docker run -it –name mongo-client mongo /bin/bash</p><p>3 进入要作为master数据库的 mongodb shell<br>    mongo 192.168.31.206:27017/admin</p><p>4 初始化副本集, _id和启动时设置的replSet参数相同<br>    rs.initiate({ _id:”exuehui-mongo-set”, members:[{_id:0,host:”home.lemonsoft.vip:27017”}, {_id:1,host:”home.lemonsoft.vip:27018”}, {_id:2,host:”home.lemonsoft.vip:37017”}<br>    ]})</p><p>5 查看副本集状态<br>    rs.status()</p><p>6.创建权限用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use admin;</span><br><span class="line">db.createUser(&#123; user: '1iURI', pwd: 'rootroot', roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125; ] &#125;);</span><br><span class="line"></span><br><span class="line">use exuehui</span><br><span class="line">db.createUser(&#123; user: '1iURI-exuehui', pwd: 'rootroot', roles: [ &#123; role: "readWrite", db: "exuehui" &#125; ] &#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li>重新运行容器，并添加–auth<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongodb-server0 \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/mongodb0:/data/db \</span><br><span class="line">-v /data/mongodb0_conf:/opt/keyfile \</span><br><span class="line">-p 27017:27017 \</span><br><span class="line">-d d22 \</span><br><span class="line">--smallfiles \</span><br><span class="line">--keyFile /opt/keyfile/mongodb-keyfile \</span><br><span class="line">--auth \</span><br><span class="line">--replSet exuehui-mongo-set</span><br><span class="line"></span><br><span class="line">docker run --name mongodb-server1 \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/mongodb1:/data/db \</span><br><span class="line">-v /data/mongodb1_conf:/opt/keyfile \</span><br><span class="line">-p 27018:27017 \</span><br><span class="line">-d d22 \</span><br><span class="line">--smallfiles \</span><br><span class="line">--keyFile /opt/keyfile/mongodb-keyfile \</span><br><span class="line">--auth \</span><br><span class="line">--replSet exuehui-mongo-set</span><br><span class="line"></span><br><span class="line">docker run --name mongodb-server0 \</span><br><span class="line">--restart always \</span><br><span class="line">-v /data/mongodb0:/data/db \</span><br><span class="line">-v /data/mongodb0_conf:/opt/keyfile \</span><br><span class="line">-p 37017:27017 \</span><br><span class="line">-d d22 \</span><br><span class="line">--smallfiles \</span><br><span class="line">--keyFile /opt/keyfile/mongodb-keyfile \</span><br><span class="line">--auth \</span><br><span class="line">--replSet exuehui-mongo-set</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      Mongodb学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.kyralo.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://www.kyralo.online/tagsP/Docker/"/>
    
      <category term="Web" scheme="https://www.kyralo.online/tagsP/Web/"/>
    
      <category term="MongoDB" scheme="https://www.kyralo.online/tagsP/MongoDB/"/>
    
  </entry>
  
</feed>
